#ifndef FMTKSDK_HPP
/**
 * \internal
 */
#define FMTKSDK_HPP

#ifndef FMTK_VERSION

/**
 * \addtogroup fmtk_version_macros
 * Version macros for FMTK SDK used to build the mod
 * \{
 */

/**
 * \brief A c-style string literal containing the dot separated version number
 */
#define FMTK_VERSION "@fmtk_VERSION@"

/**
 * \brief An integer literal containing the major component of the version number
 */
#define FMTK_VERSION_MAJOR @fmtk_VERSION_MAJOR@

/**
 * \brief An integer literal containing the minor component of the version number
 */
#define FMTK_VERSION_MINOR @fmtk_VERSION_MINOR@

/**
 * \brief An integer literal containing the patch component of the version number
 */
#define FMTK_VERSION_PATCH @fmtk_VERSION_PATCH@

/**
 * \brief An integer literal containing the tweak component of the version number
 */
#define FMTK_VERSION_TWEAK @fmtk_VERSION_TWEAK@

/**
 * \}
 */

#endif // !FMTK_VERSION

/**
 * \struct FMTKVersion
 * \brief This structure contains the values of the version macros of FMTK SDK used to build the mod.
 */
struct FMTKVersion
{
	/**
	 * \brief The major version
	 */
	unsigned int major = FMTK_VERSION_MAJOR;

	/**
	 * \brief The minor version
	 */
	unsigned int minor = FMTK_VERSION_MINOR;

	/**
	 * \brief The patch version
	 */
	unsigned int patch = FMTK_VERSION_PATCH;

	/**
	 * \brief The tweak version
	 */
	unsigned int tweak = FMTK_VERSION_TWEAK;
};

/**
 * \brief Log levels available for use with Log
 */
enum class LogLevel
{
	/**
	 * \brief This is a message for an FMTK developer. Exclude it from release builds.
	 */
	TRACE,

	/**
	 * \brief This is a message for a mod developer.
	 */
	DEBUG,

	/**
	 * \brief This is a message for a user that everythong is fine and no action is necessary.
	 */
	INFO,

	/**
	 * \brief This is a message for a user that something may be wrong but no action is necessary.
	 */
	WARN,

	/**
	 * \brief This is a message for a user that something is wrong but no action is necessary. A recoverable error.
	 */
	ERR,

	/**
	 * \brief This is a message for a user that something is wrong and action is necessary. An unrecoverable error.
	 */
	CRITICAL,
};

/**
 * \brief This structure contains pointers to FMTK functions that should be filled in when the mod is loaded.
 */
class FMTKApi
{
public:
	/**
	 * \brief Get the mods directory path
	 *
	 * Get the absolute path of the mods directory as a c-style string.
	 * \return A c-style string containing the absolute path of the mods directory.
	 */
	const char* (*GetModsDirectoryPath)();

	/**
	 * \brief Get the players position
	 *
	 * Get the players position as a 3 element float array.
	 * \return A pointer to a 3 element float array containing the XZY components of the player's position. Will be null if the players position cannot be obtained. This pointer is owned by FMTK and should not be freed.
	 */
	float* (*GetPlayerPosition)();

	/**
	 * \brief Run a command string
	 *
	 * Run a command string.
	 * \param cmd A c-style string containing the command string. Owned by the caller.
	 * \return A bool that is true if the command ran successfully and false if it failed.
	 */
	bool (*RunCommand)(const char* cmd);

	/**
	 * \brief Register a command
	 *
	 * Register a command.
	 * \param name A c-style string containing the command name. The abbreviated version of the command name will be generated from the capital letters taken in left to right order.
	 * \param callback A pointer to a callback function to be run when the command is invoked.
	 */
	void (*RegisterCommand)(const char* name, bool(*callback)(int argc, const char** argv));

	/**
	 * \brief Unregister a command
	 *
	 * Remove a previously registered command callback.
	 * \param name A c-style string containing the command name. Both the long form and short form are accepted.
	 */
	void (*UnregisterCommand)(const char* name);

	/**
	 * \brief Submit a log message
	 *
	 * Submit a log message to FMTK to be output to the console and written to the log file as applicable.
	 * \param level The severity of the incident being logged.
	 * \param source A c-style string containing the name of the event's source. This should be the name of the mod calling the function.
	 * \param msg A c-style string containing the message to be logged.
	 */
	void (*Log)(LogLevel level, const char* source, const char* msg);

	/**
	 * \brief Alias a path
	 *
	 * Instruct fuel to open the newPath whenever it tries to open originalPath.
	 * \param originalPath The original path relative to FUEL's working directory. Case insensitive.
	 * \param newPath The new path relative to FUEL's working directory. Case insensitive.
	 */
	void (*Alias)(const char* originalPath, const char* newPath);

	/**
	 * \brief Unalias a path
	 *
	 * Instruct fuel to open the originalPath whenever it tries to open originalPath undoing a previous Alias call.
	 * \param originalPath The original path relative to FUEL's working directory. Case insensitive.
	 */
	void (*Unalias)(const char* originalPath);
};

/**
 * \brief The FMTKMod base class all mods inherit
 */
class FMTKMod
{
public:
	/**
	* \brief Initialize Hook
	*
	* This function is called before the game's WinMain entry point. At this point the ScriptManager is unavailable so calls to command functions will fail. This will always be the first hook to run.
	*/
	virtual void Initialize() {}
	
	/**
	* \brief Tick Hook
	*
	* This function is called once per execution of the game's CoreMainLoop function.
	*/
	virtual void Tick() {}
	
	/**
	* \brief ScriptManagerInitialize Hook
	*
	* This function is called once the ScriptManager is initialized. This is the first legal place to call the register command function. None of the FUEL commands have been registered yet so RunCommand with them will fail.
	*/
	virtual void ScriptManagerInitialize() {}
	
	/**
	* \brief Shutdown Hook
	*
	* This function is called before the FMTK dll is unloaded. This will always be the last hook to run.
	*/
	virtual void Shutdown() {}

#ifndef FMTK_INTERNAL
#ifndef DOXYGEN
#ifndef __INTELLISENSE__
// Placeholder methods for forward compatibility
@FMTK_PLACEHOLDER_HPP_IN@
#endif // !__INTELLISENSE__
#endif // !DOXYGEN
#endif // !FMTK_INTERNAL
};

#ifndef FMTK_INTERNAL

/**
 * \internal
 * \brief Instruct the compiler on the linkage specifications for a function
 */
#define FMTKAPI extern "C" __declspec(dllexport) __declspec(noinline)

/**
 * \brief Get a pointer to the version of the FMTKSDK used to build the mod.
 * \return A pointer to an FMTKVersion struct owned by the mod. This should not be freed.
 */
FMTKAPI const FMTKVersion* GetFMTKVersion();

/**
 * \internal
 * \brief Static FMTKVersion to be passed by pointer to the FMTK process for validation.
 */
extern const FMTKVersion fmtkVersion;

/**
 * \brief A pointer to an FMTKApi struct owned by FMTK and automatically initialized when the mod is registered. This should not be freed.
 */
extern const FMTKApi* fmtk;

/**
 * \brief Generates the necessary functions for the mod to be loaded by FMTK and initialize the fmtk global variable. This macro should only be used once per dll. This macro must appear after the mod class has been defined.
 * \param class_name The fully qualified name of the class implementing FMTKMod. There should only be one class implementing FMTKMod per dll.
 */
#define REGISTER_MOD(class_name) \
	const FMTKVersion fmtkVersion; \
	const FMTKApi* fmtk; \
	FMTKAPI const FMTKVersion* GetFMTKVersion() { return &fmtkVersion; } \
	class_name mod; \
	FMTKAPI class_name* GetMod(const FMTKApi* fmtkApi) { fmtk = fmtkApi; return &mod; }

#endif // !FMTK_INTERNAL

#endif // !FMTKSDK_HPP
