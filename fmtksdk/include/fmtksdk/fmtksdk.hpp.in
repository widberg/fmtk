#ifndef FMTKSDK_HPP
#define FMTKSDK_HPP

#ifndef FMTK_VERSION

#define FMTK_VERSION "@fmtk_VERSION@"
#define FMTK_VERSION_MAJOR @fmtk_VERSION_MAJOR@
#define FMTK_VERSION_MINOR @fmtk_VERSION_MINOR@
#define FMTK_VERSION_PATCH @fmtk_VERSION_PATCH@
#define FMTK_VERSION_TWEAK @fmtk_VERSION_TWEAK@

#endif // !FMTK_VERSION

struct FMTKVersion
{
	unsigned int major = FMTK_VERSION_MAJOR;
	unsigned int minor = FMTK_VERSION_MINOR;
	unsigned int patch = FMTK_VERSION_PATCH;
	unsigned int tweak = FMTK_VERSION_TWEAK;
};

enum class LogLevel
{
	TRACE,
	DEBUG,
	INFO,
	WARN,
	ERR,
	CRITICAL,
};

struct FMTKApi
{
	void (*print)(const char* msg);
	const char* (*GetModsDirectoryPath)();
	float* (*GetPlayerPosition)();
	bool (*RunCommand)(const char* cmd);
	void (*RegisterCommand)(const char* name, bool(*callback)());
	void (*Log)(LogLevel level, const char* source, const char* msg);
};

class FMTKMod
{
public:
	virtual void Initialize() {}
	virtual void Tick() {}
	virtual void ScriptManagerInitialize() {}
	virtual void Shutdown() {}

#ifndef FMTK_INTERNAL
#ifndef DOXYGEN
#ifndef __INTELLISENSE__
// Placeholder methods for forward compatibility
@FMTK_PLACEHOLDER_HPP_IN@
#endif // !__INTELLISENSE__
#endif // !DOXYGEN
#endif // !FMTK_INTERNAL
};

#ifndef FMTK_INTERNAL

#define FMTKAPI extern "C" __declspec(dllexport) __declspec(noinline)
FMTKAPI const FMTKVersion* GetFMTKVersion();
extern const FMTKVersion fmtkVersion;
extern const FMTKApi* fmtk;

#define REGISTER_MOD(class_name) \
const FMTKVersion fmtkVersion; \
const FMTKApi* fmtk; \
FMTKAPI const FMTKVersion* GetFMTKVersion() { return &fmtkVersion; } \
class_name mod; \
FMTKAPI class_name* GetMod(const FMTKApi* fmtkApi) { fmtk = fmtkApi; return &mod; }

#endif // !FMTK_INTERNAL

#endif // !FMTKSDK_HPP
