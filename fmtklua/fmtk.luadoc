---FMTK module
---@module fmtk
fmtk = {}

---register a hook
---@param event number and Event enum value
---@param id string a unique id to refer to this hook as 
---@param callback function function signature depends on the event
function fmtk.hook(event, id, callback) end

---unregister a hook
---@param event number and Event enum value
---@param id string the unique id of the hook
function fmtk.unhook(event, id) end

---Version structure
---@class version
---@field public major number
---@field public minor number
---@field public patch number
---@field public tweak number
version = {}

---get the version of FMTK SDK that was used to build FMTKLua
---@return version version
function fmtk.get_fmtklua_version() end

---run a command string
---@param cmd string The command string you would normally type into the command palette
---@return bool success
function fmtk.run_command(cmd) end

---register command
---@param name string The name of the command. The abbreviated version of the command name will be generated from the capital letters taken in left to right order.
---@param callback fun(args:string[]):bool
function fmtk.register_command(name, callback) end

---unregister a command
---@param name string The name of the command
function fmtk.unregister_command(name) end

---Position structure
---@class position
---@field public x number
---@field public z number
---@field public y number
position = {}

---get the position of the player
---@return position position
function fmtk.get_player_position() end

---Event enum
---@class event
---@field public INITIALIZE number @This hook is called before the game's WinMain entry point. At this point the ScriptManager is unavailable so calls to command functions will fail. This will always be the first hook to run.
---@field public TICK number @This hook is called once per execution of the game's CoreMainLoop function.
---@field public SCRIPT_MANAGER_INITIALIZE number @This hook is called once the ScriptManager is initialized. This is the first legal place to call the register command function. None of the FUEL commands have been registered yet so RunCommand with them will fail.
---@field public SHUTDOWN number @This hook is called before the FMTK dll is unloaded. This will always be the last hook to run.
event = {}

---FMTK file system module
---@class fs
fs = {}

---alias a file path
---@param oldPath string The old path relative to the FUEL working directory or absolute.
---@param newPath string The new path relative to the FUEL working directory or absolute.
function fs.alias(oldPath, newPath) end

---unalias a file path
---@param oldPath string The old path relative to the FUEL working directory or absolute.
function fs.unalias(oldPath) end

---get the mods directory path
---@return string absolute mods directory path
function fs.get_mods_directory_path() end

---get the current lua file path
---@return string absolute current lua file path
function fs.get_current_file_path() end

---FMTK log module
---@class log
log = {}

---log a trace message
---@param source string This should be the name of the mod calling the function.
---@param msg string
function log.trace(source, msg) end

---log a debug message
---@param source string This should be the name of the mod calling the function.
---@param msg string
function log.debug(source, msg) end

---log an info message
---@param source string This should be the name of the mod calling the function.
---@param msg string
function log.info(source, msg) end

---log a warining
---@param source string This should be the name of the mod calling the function.
---@param msg string
function log.warn(source, msg) end

---log an error
---@param source string This should be the name of the mod calling the function.
---@param msg string
function log.error(source, msg) end

---log a critical error
---@param source string This should be the name of the mod calling the function.
---@param msg string
function log.critical(source, msg) end
