#ifndef	__RAIN_VHL__
#define	__RAIN_VHL__

#include "_vertex_const.h"
#include "sfx.h"

//-------------------------------------------

struct VS_SfxIn_Rain
{
	float4	positionRotation			: POSITION;
	float4	uvscale						: TEXCOORD0;
//	float4	rgba						: TEXCOORD1;
};

//-------------------------------------------

// rain fall
void vh_rain ( VS_SfxIn_Rain i, out VS_SfxOutRainSnow o )
{
	float4	RainColor				= C_USER0;
	float2	xzSpeed					= C_USER1.xz;
	float	TankScale				= C_USER1.w;
	float	WidthFar				= C_USER2.x;
	float	WidthNear				= C_USER2.y;
	float	Height					= C_USER2.z;
	float	IndividualAngleStrength	= C_USER2.w;
	float	ParticleAlphaNear		= C_USER3.x;
	float	ParticleAlphaFar		= C_USER3.y;
	float3	adjustment				= C_USER4.xyz;
	float3	SpeedTime				= C_USER5.xyz;
	float3	BoxMinimum				= C_USER6.xyz;		
	float3	BoxMaximum				= C_USER7.xyz;

	float3	currentPosition			= i.positionRotation.xyz + SpeedTime;
	float3	position				= MapTankCoordinate ( currentPosition, adjustment, TankScale );

	// adjust & blend rain alpha
	bool3	OutOfBounds;
//			OutOfBounds.x			= all ( position.xyz > BoxMinimum.xyz );	// pos higher then min
//			OutOfBounds.y			= all ( position.xyz < BoxMaximum.xyz );	// pos lower then max
			OutOfBounds.x			= all ( step ( BoxMinimum.xyz, position.xyz ) );	// pos higher then min
			OutOfBounds.y			= all ( step ( position.xyz, BoxMaximum.xyz ) );	// pos lower then max
			OutOfBounds.z			= all ( OutOfBounds.xy );					// lower and higher

	float4	opos;

	// confines rain to a "box" around vehicle to keep
	// from processing too much rain far in distance
//	if ( !OutOfBounds.z )
//	{

	float2	xzSpeedAdjust;
			xzSpeedAdjust.x			= i.positionRotation.w / 1000.0;
			xzSpeedAdjust.y			= frac ( i.positionRotation.w );		
			xzSpeedAdjust			-= C_HALF;

	float2	xzIndividualSpeed		= xzSpeedAdjust * IndividualAngleStrength * C_TWO;
			xzIndividualSpeed		= xzSpeed + xzIndividualSpeed;

	float3	displacement;
			displacement.xz			= -xzIndividualSpeed;
			displacement.y			= Height;
			displacement			*= i.uvscale.w;

			opos.xyz				= position + displacement;
			opos.w					= C_UNIT;
			opos					= WorldToViewVertex ( opos );

	// (asobo) fit for the size of the quads too far (we have no AA)
	float	depth					= abs ( opos.z / TankScale );
			depth					= lerp ( WidthNear, WidthFar, depth );
			depth					*= i.uvscale.z;
			opos.x					+= depth;

//			RainColor.a				= OutOfBounds.z ? C_NULL : lerp ( ParticleAlphaNear, ParticleAlphaFar, depth );
//			RainColor.a				= OutOfBounds.z ? C_NULL : lerp ( ParticleAlphaNear, ParticleAlphaFar, depth );
			RainColor.a				= lerp( ParticleAlphaNear, ParticleAlphaFar, depth );
//			RainColor.a				= lerp( RainColor.a, C_NULL, OutOfBounds.z );
			RainColor.a				= Select( RainColor.a, C_NULL, OutOfBounds.z );
//	}

			o.position				= ProjVertex(opos);
			o.diffuse				= RainColor;
			o.diffuse.rgb			*= 2;		// from pixel shader
			o.uv					= i.uvscale.xy;
			o.rain					= true;
}

//------------------------------------------

// rain splash impact on ground
void vh_splash ( VS_SfxIn_Rain i, out VS_SfxOutRainSnow o )
{
	float4	RainColor			= C_USER0;
//	float3	Speed				= C_USER1.xyz;
//	float	TankScale			= C_USER1.w;
//	float3	ParticleScale		= C_USER2.xyz;	// old
	float2	ParticleScale		= C_USER2.xy;	// we're just using .xy, so skip .z
//	float2	uvTexture			= C_USER3.xy;
	float	uvSingleStep		= C_USER3.z;
	float	Time				= C_USER4.x;
	float	AnimationTime		= C_USER4.y;
	float	TextureSteps		= C_USER4.z; 

	float	particleSpawnTime	= ( i.positionRotation.w + Time ) / AnimationTime;
			particleSpawnTime	= fmod ( particleSpawnTime, C_UNIT ) * TextureSteps;
	float	animationPosition	= floor ( particleSpawnTime ) * uvSingleStep;

	float2	uv					= i.uvscale.xy;
			uv.x				+= animationPosition;

			ParticleScale.xy	*= i.uvscale.zw * 1.25;	// bigger splashes, but not too big

			o.position.xyz		= i.positionRotation.xyz;
			o.position.y		+= ParticleScale.y;
			o.position.w		= C_UNIT;
			o.position			= WorldToViewVertex ( o.position );	// vPos
			o.position.x		+= ParticleScale.x;
			o.position			= ProjVertex ( o.position );		// oPos

			o.diffuse			= RainColor;
			o.diffuse.rgb		*= 2;		// from pixel shader
			o.uv				= uv;
			o.rain				= false;//true;
}

#endif