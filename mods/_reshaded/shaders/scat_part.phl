#ifndef	__SCAT_PART_PHL__
#define	__SCAT_PART_PHL__

#include "hlsl_math.h"
#include "hlsl_shadow.h"
#include "_vertex_const.h"
#include "_pixel.h"
#include "scat_part.h"

/*
	code handles another hodge-podge mix of items:
		* red flare smoke
		* fire ember smoke (from burning piles of wood and single burning trees ... NOT large smoke clouds on distant horizon)
		* smoke "fog banks" that fade in when sitting in burning forests for too long
		* dust from objects falling over / getting torn up in tornadoes (eg: electrical tower falling, semi moving at you in Tornado Warning)
*/

 	float4 ph_base (VS_ScatPart i) : COLOR
  	{
		float	night			= IS_NIGHT;
		float	bias			= 0;	// set here, or compiler will blow up if var could get nixed if shadows aren't done

	#ifdef	bShadowMap
		int		slice			= 0;
		float	shadow			= SHADOW_VTX_BIL( slice );
				bias			= SET_BIAS( slice );	// do this after shadow, b/c shadow sets slice
				i.sunlight.rgb 	= lerp( i.skylight.rgb, i.sunlight.rgb, SOFTEN_SHADOW( shadow ) );
	#endif

	// these are soft particles, so already blurry / smudgy.
	// so, we can bias them more in distance to gain a bit more performance.

		float4	tDiffuse		= tex2DB( sDiffuse, i.uv, bias * 2 );
				tDiffuse.a		*= i.skylight.a;
				tDiffuse.rgb	*= NIGHT_LIGHTEN2( i.sunlight.rgb,  night );
				tDiffuse.rgb	+= NIGHT_DARKEN2 ( i.inscatter.rgb, night );
		return	tDiffuse;
	}

#endif