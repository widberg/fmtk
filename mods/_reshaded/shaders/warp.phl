#ifndef	__WARP_PHL__
#define	__WARP_PHL__

#include "warp.h"

	// sky
	// extinction handles haze amount around vehicle,
	// then transitions to inscatter towards horizon,
	// so since sky is on horizon, only needs inscatter?

	float4 ph_sky( VS_SkyOutput i) : COLOR0
	{
		return	NIGHT_DARKEN ( i.inscatter );	// made float4 & .a set to 1 in vertex shader
	}

	//---------------------------------
	// let's not downsample sun / moon.
	// needs to be prominent / crisp in distant sky.
	//---------------------------------

	// sun / moon disc
	float4 ph_skysun( VS_SkysunOutput i) : COLOR0
	{
		bool	night			= IS_NIGHT;									// 1 if night, 0 if day
		float4	moonTexture 	= tex2D(sDiffuse, i.uv);					// texture of moon surface
				i.mooncolor		*= moonTexture.a * moonTexture.rgb;			// alpha & rgb texture
				i.suncolor		*= moonTexture.a;							// alpha only
				i.mooncolor		= NIGHT_LIGHTEN2 ( i.mooncolor, night );	// brighten moon during darker nights to look normal
//				moonTexture.rgb	= lerp( i.suncolor, i.mooncolor, night );	// try lerping performance
//				moonTexture.rgb	= night ? i.mooncolor : i.suncolor;
				moonTexture.rgb	= Select( i.suncolor, i.mooncolor, night );
				moonTexture.rgb	+= i.inscatter;
		return	moonTexture;
	}

	// this seems to handle "air" color some how
	// so keep calc's as-is
	void ph_gbuffer( VS_SkyGBuffer_Output i, out PS_GBuffer o)
	{
				o.Normal		= 0;
		// keep calcs here
				o.Depth.x		= i.position2.z / i.position2.w;
				o.Depth.yz		= 0;
				o.Depth.w		= 1;
//				o.Depth			= i.position2;	// moved calcs to vertex shader
	}

#endif