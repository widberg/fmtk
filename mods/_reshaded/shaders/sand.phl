#ifndef	__SAND_PHL__
#define	__SAND_PHL__

#define bNormal

#include "sfx.h"
#include "__setup.h"
#include "sand.h"
#include "scattering_light.h"

//------------------------------------------
// let's not downsample sand or tornadoes.
// they need to be crisp, clear textures,
// as a prominent weather feature in races.
//------------------------------------------

// doesn't seem to be used, so neutering code
float4 ph_sand () : COLOR0	{return	0;}

//------------------------------------------

// lighting algorithm for ph_sandstorm below
float3 lightingsandstorm( float3 normal, float3 sunvec, float3 skyvec )
{
	float2	dots;
			dots.x	= dot( normal, skyvec );
			dots.y	= dot( normal, sunvec );
			dots	= saturate ( dots );
	float3	suncol	= SetSkyColor() * dots.x 
					+ SetSunColor() * dots.y 
					+ SetAmbColor();
	return	suncol;
}


float4 ph_sandstorm(VS_SandStorm_Output i) : COLOR0
{
#ifdef	bCompression
	// abs()'ing is ugly, so going with length()
	float3	normal1;
			normal1.xy		= tex2D( sNormal, i.uvNormals.xy).wy * 2 - 1;
			normal1.z		= 1 - length( normal1.xy );

	float3	normal2;
			normal2.xy		= tex2D( sNormal, i.uvNormals.zw).wy * 2 - 1;
			normal2.z		= 1 - length( normal2.xy );
#else
	float3	normal1			= tex2D( sNormal, i.uvNormals.xy).rgb * 2 - 1;
	float3	normal2			= tex2D( sNormal, i.uvNormals.zw).rgb * 2 - 1;
#endif

	float3	normal			= normal1 + normal2;
			normal			*= 0.5;
			normal			= mul(normal, i.TBNmatrix);
			normal			= normalize(normal);

// move this to vertex?
			i.eyevec.xyz	= normalize ( i.eyevec.xyz );
	float	alpha			= dot(i.TBNmatrix[2].xyz, i.eyevec.xyz);
			alpha			= pow(alpha, 1.5) * 5;
			alpha			= saturate(alpha) * i.diffuse.a;
	
	float3	sundir			= float3(0, -1, 0);
	float3	skydir			= gDSkyDir.xyz;
			skydir.xz		= -skydir.xz;

	float4	tDiffuse		= tex2D(sDiffuse, i.uvDiffuse.xy);
			tDiffuse.rgb	*= i.diffuse.rgb;
			tDiffuse.rgb 	*= lightingsandstorm( normal, sundir, skydir);
			tDiffuse.rgb 	*= i.extinction.rgb;
			tDiffuse.rgb 	+= NIGHT_DARKEN ( i.inscatter.rgb );
			tDiffuse.a 		*= alpha;
	return	tDiffuse;
}

#endif