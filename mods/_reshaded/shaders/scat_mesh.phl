#ifndef	__SCAT_MESH_PHL__
#define	__SCAT_MESH_PHL__

#include "scat_mesh.h"
#include "hlsl_shadow.h"
#include "_vertex_const.h"
#include "hlsl_math.h"
#include "scattering_light.h"
#include "_pixel.h"
#include "__setup.h"

//-------------------------------------
/*
	scat_skin.vhl & scat_mesh.vhl both feed
	into this for final pixel processing.
*/
//-------------------------------------

#ifdef	bDirt
	sampler2D 			sDirt;
#endif
#ifdef	bOcclusion
	sampler2D 			sOcclusion;
#endif
#ifdef	bAddNormalLocal
	sampler2D 			sAddNormalLocal;
#endif
#ifdef	bColoured
	float3				gGouraudDefault;
#endif

//-------------------------------------

	float4x3 			gLocalToWorldNormalMatrix;

//-------------------------------------

	// don't mess with this.. while some var's don't seem to be fully used,
	// (eg: FallOff.xy used, but not .zw), the game engine still seems to process
	// this some how.. EG: if you remove Params, then wheels on some vehicles won't process rain sheening (!!!)
	// not sure why.. but basically, don't mess with this.
	struct PixelMat {
		float4		Diffuse		: register(c0);	//MaterialDiffuse.xyz .w=1.f for Additif&Soustratif otherwise 0.f
		float4		Emissive	: register(c1);	//MaterialEmissive.xyz .w=Opacity
		float4		Specular	: register(c2);	//MaterialSpecular.xyz w=Glossiness
		float4		Params		: register(c3); //Refraction.z EnvmapFactor.w
		float4		FallOff		: register(c4); //Fresnel Perp.x Fresnel Para.y
	};
 
	const PixelMat		gMaterial;


//-------------------------------------

	float Fresnel( float3 eyevec, float3 normal, float minFresnel, float maxFresnel )
	{
		float	cosangle	= 1.0f - saturate( dot( eyevec, normal ) );
		float	fresnel		= pow( cosangle, 5.0f );
				fresnel		= lerp( minFresnel, maxFresnel, fresnel );
		return	fresnel;
	}

	float3 lightingmaterial(float3 suncol)
	{
				suncol	= gMaterial.Diffuse.a   * gMaterial.Emissive.rgb
						+ gMaterial.Diffuse.rgb * suncol;
		return	suncol;
	}

//-------------------------------------


	float4 ph_base (VS_ScatOutput i, float2 vPos : VPOS) : COLOR
  	{
		//--------------------------------------------
		// Prep
		//--------------------------------------------

		int		slice		= 0;
		float	shadow		= SHADOW_PXL_TRI( slice );
		float	bias		= SET_BIAS( slice );	// do this after shadow, b/c shadow sets slice
		float2	uv			= GetDiffuseUV(i);
		float3	omni		= GetDeferredLights(vPos.xy, bias);	// headlights
		float3	eyevec		= normalize(i.eyevec.xyz);


		//--------------------------------------------
		// Main Diffuse / Color
		//--------------------------------------------

		#ifdef	bBroken
		float	breakAmount = GetBroken(i);
		float4	halfuv		= i.brokenUV;

		float4	tDiffuse	= lerp(tex2DB( sDiffuse, halfuv.xy, bias ),
								   tex2DB( sDiffuse, halfuv.zw, bias ),
								   breakAmount);
		#else
		float4	tDiffuse	= tex2DB(sDiffuse, uv, bias);
		#endif


		#ifdef	bColoured
				//Car liveries
				tDiffuse.rgb = lerp( gGouraudDefault.rgb, tDiffuse.rgb, tDiffuse.a );
				tDiffuse.a = 1.0;
		#endif


		//--------------------------------------------
		// Dirt overlay
		//--------------------------------------------

		#ifdef	bDirt
			float4	tDirt		= tex2DB(sDirt, uv.xy, bias);
			float	dirtiness	= smoothstep(i.dirtiness.x, i.dirtiness.y, tDirt.a );
					dirtiness	*= 0.9;//0.95;	// let some vehicle paint/livery show through the mud
					tDiffuse.rgb = lerp( tDiffuse.rgb, tDirt.rgb, dirtiness );
		#endif


		//--------------------------------------------
		// Ambient Occlusion (under vehicle & from trees)
		//--------------------------------------------

		float	occlusion	= 1;

		// AO spot under vehicles
		#ifdef	bOmni
				occlusion	*= GetOmniOcclusion( i.omni.xyz, bias );
		#endif

		// don't do this here, b/c washed out too much and not noticeable
		#ifdef	bOcclusion
//				occlusion	*= tex2DB(sOcclusion, uv.xy, bias).x;
		#endif

		// AO from tree canopies
				occlusion 	*= gDLight.Ambient.w;
				occlusion	= SaturateOcclusion ( occlusion, shadow );	// AO only occurs in shadows



		//--------------------------------------------
		// normal maps
		//--------------------------------------------

		float3	normal;

		#ifdef	bNormal
//tDiffuse.r *= 10;
			#ifdef	bBroken
//tDiffuse.r *= 10;
				#ifdef	bCompression
					normal	= lerp(	tex2Ddist(sNormal, halfuv.xy, bias).xyz * 2 - 1,
									tex2Ddist(sNormal, halfuv.zw, bias).xyz * 2 - 1,
									breakAmount);
				#else
					float2	huv		= halfuv.xy;
							huv.x	+= 0.5;
					normal	= lerp(	tex2DB(sNormal, halfuv.xy, bias).rgb,
									tex2DB(sNormal, huv.xy, bias).rgb,
									breakAmount) * 2 - 1;
				#endif
			#else
				#ifdef	bCompression
//tDiffuse.r *= 10;
					normal	= tex2Ddist(sNormal, uv.xy, bias).rgb * 2 - 1;
				#else
//tDiffuse.g *= 10;
					normal	= tex2DB(sNormal, uv.xy, bias).rgb * 2 - 1;
				#endif
			#endif

//				normal = normalize(normal);	
				normal = mul(normal, i.TexSpace.axe);
				normal = normalize(normal);
		#else

//tDiffuse.g *= 10;
			#ifdef	bNormalLocal
				#ifdef	bBroken
					#ifdef	bCompression
						normal = lerp(	tex2DB(sNormalLocal, halfuv.xy, bias).xyw * 2 - 1,
										tex2DB(sNormalLocal, halfuv.zw, bias).xyw * 2 - 1,
										breakAmount);
					#else
						normal = lerp(	tex2DB(sNormalLocal, halfuv.xy, bias).xyz,
										tex2DB(sNormalLocal, halfuv.zw, bias).xyz,
										breakAmount) * 2 - 1;
					#endif
				#else
					#ifdef	bCompression
						normal = tex2DB(sNormalLocal, uv.xy, bias).xyw * 2 - 1;
					#else
						normal = tex2DB(sNormalLocal, uv.xy, bias).xyz * 2 - 1;
					#endif
				#endif
				normal = normalize(normal);
			#else
				normal = i.TexSpace.normal;						// Vertex normal
				#ifdef	bAddNormalLocal									// + Normal Map broken
					#ifdef	bBroken
						#ifdef	bCompression
							normal = lerp( normal.xyz, tex2DB(sAddNormalLocal, uv, bias).xyw * 2 - 1, breakAmount);
						#else
							normal = lerp( normal.xyz, tex2DB(sAddNormalLocal, uv, bias).xyz * 2 - 1, breakAmount);
						#endif
					#endif
					normal = normalize(normal);
				#endif
			#endif
		#endif


//		normal = normalize(normal);



		//----------------------------------------
		// Specular
		//----------------------------------------
	
		float4	specular	= gMaterial.Specular;

		#ifdef	bSpecular
				specular	*= tex2DB(sSpecular, uv.xy, bias);
		#endif

		// we're mul'ing specular.rgb by a bunch of float's below,
		// so just create a single float value to finalize by

		// if we're doing any of these, do the specular adjustment
		#if defined(bDirt) || defined(bBroken)
			float	specAdjust	= 1;

			#ifdef	bDirt
					specAdjust	*= ( 1.0 - dirtiness );
			#endif
			#ifdef bBroken
					specAdjust	*= ( 1.0 - breakAmount * 0.5 );
			#endif

					// finalize specular color
					specular.rgb	*= specAdjust;
		#endif



		//----------------------------------------
		// Environmental Reflection
		//----------------------------------------

		float3	sunvec		= gDLight.Dir.xyz;
		float3	spccol		= specular.rgb;
		float	spcpow		= specular.a;
		lights	light		= SetLightColors( shadow, spccol );
		float	night		= IS_NIGHT;

		float3	spcref		= reflect( -eyevec, normal );

	#if ( RAIN_SHEEN == 1 ) || defined( bCubemap )
		float3	reflection	= mul( spcref, gLocalToWorldNormalMatrix ).xyz;	// this keeps reflection from rotating with tires
				reflection	= GetCubeMap( reflection, bias );
	#endif


	//----------------------------
	// chrome / clear-coat cubemapping fresnel / influence
	//----------------------------

	// need to process cubemap influence before specular.rgb is processed by lighting below
	// FIXED.. light.spc tracks processed specular, while specular tracks unprocessed
	#ifdef bCubemap
		// cubemap lighting
		float	cubemapInfluence	= Fresnel( eyevec, normal, gMaterial.FallOff.x, gMaterial.FallOff.y );
//		float	specLuminance		= dot( specular.rgb, 1 );//0.5 );//0.33 );//1 );	// 2
		float	specLuminance		= dot( specular.rgb, 0.5 );//0.5 );//0.33 );//1 );	// 2
				cubemapInfluence	*= specLuminance;

		// same things impacting specular impact cubemapinfluence fresnel.
		// b/c specular doesn't seem to be impacted enough
		// however, since specular already does this stuff,
		// and we're dot'ing specular luminance above, then
		// we're already accounting for it with the specular.

		#ifdef	bDirt
//				cubemapInfluence	*= ( 1.0 - dirtiness );	// dirt covers up cubemaps to show more underlying diffuse color
		#endif	
		#ifdef bBroken
//				cubemapInfluence	*= ( 1.0 - breakAmount * 0.5 );	// skip this.. makes some cubemaps dark for no reason
		#endif

				cubemapInfluence	= saturate(cubemapInfluence);	// clamp between 0 to 1
//				cubemapInfluence	*= 0.9;							// show details of underlying materials some (eg: make chrome look smudged)


		// cubemap chrome'ing and clear-coats look awful at night
		// because reflection doesn't take headlights into account,
		// only sun/sky mix. Can't disable them with IS_NIGHT, because
		// the vehicle selection menu thinks it's "night time" when
		// active, and kills the chromes on vehicles (even if you
		// use gTintLerp.a to try to override it to remain to flag
		// when menu is up.) So, we work around this by using omni
		// headlight color. It's 0 when day time, and >0 at night.
		// we can get the inverse saturated dot (luminance) of it to
		// determine if it's night, and kill the cubemaps without
		// impacting the vehicle selection menu. *whew*

				cubemapInfluence	*= (1 - saturate( dot(omni,1) ));				// disable at night


// don't add it through light.. amb color is too bright in shadows,
// and sky / sun don't chrome enough (make chromes look like clear-coats)
//				light.sun	= lerp ( light.sun, reflection, cubemapInfluence );
//				light.sky	= lerp ( light.sky, reflection, cubemapInfluence );
//				light.amb	= lerp ( light.amb, reflection, cubemapInfluence );
	#endif


	//---------------------------------------------
	// lighting finalization
	//---------------------------------------------

		float3	dots		= lightdots( normal, sunvec, spcref, spcpow, occlusion );
				light.sky	= ShadowHighlight( light.sky, dots, eyevec, normal );

	// do rain sheen after shadow highlight,
	// or shadow highlight negates sheen
	#if ( RAIN_SHEEN == 1 )
		float	wetness		= dot( light.spc.rgb, 0.5 ) + 0.5;
				light		= SetLightWetness( light, reflection, wetness, night );
	#endif

				light		= lightcols( dots, light, shadow, omni );

		#ifndef bCubemap
		// if not doing cubemap chrome'ing, do materials surface modification
		// keep this impacting suncol, or else haze around checkpoint lights look like glass panes
		// also have it impact after suncol has already processed, or checkpoint light haze
		// will look dark on shadow-side
		// Also, don't comment out the #ifndef and do it for everything.. otherwise
		// vehicles like the General Custer will have dark paint / clear-coat
		// as the materials lighting darkens things up for some reason.
		// So, keep it between the #defined area.
				light.sun	= lightingmaterial( light.sun );
		#endif

	//---------------------------------------------
	// wrap-up (apply lighting, scattering, etc)
	//---------------------------------------------

		// dirt + diffuse get sun
				tDiffuse.rgb	*= light.sun;

		#ifdef bCubemap
		// overlay chrome / clear-coat on diffuse
		// impacts hit the reflection color, not the cubemapInfluence
		// b/c the influence lerp's between two colors.. and if you impact
		// it you'll see distinct cut-offs on chrome and such (eg: chrome
		// in sunlight, but shadows block it and no chrome.. very bad).
//				reflection		+= spccol;					// add specular to environmental reflection
//				reflection		= NIGHT_LIGHTEN( reflection ) * 0.5 + 0.5;	// lighten up during darker nights, or looks unnaturally dark

			#ifdef	bShadowMap
				reflection		*= ( max(shadow, 0.25) * occlusion );
			#else
				reflection		*= occlusion;//max(occlusion, 0.5);
			#endif


// !!!! NEED TO MESS WITH THIS MORE.. MAKES BLACK "HALO" AROUND HEADLIGHTS ON CHROME TRAILERS !!!!
		// adding omni to reflection makes it pure white at night, but doesn't impact day
		// mul'ing omni in looks good at night, but blackens it during day b/c omni is 0 during day
		// so, use gBlueShift to get day/night value, and lerp between a day / night reflection value
//				reflection		= lerp( reflection, reflection * omni, saturate(omni.r) );
// !!!! NEED TO MESS WITH THIS MORE.. MAKES BLACK "HALO" AROUND HEADLIGHTS ON CHROME TRAILERS !!!!


				tDiffuse.rgb	= lerp( tDiffuse.rgb, reflection, cubemapInfluence );
		#endif


		// add specular shine
				tDiffuse.rgb	+= light.spc;


		// occlusion texture overlay applied to diffuse texture
		// don't add this to occlusion float, or occlusion texture
		// won't "pop" on vehicles as much as it should
		// (IE: dark nooks and crannies on vehicles won't be
		// as dark as they should if you process it through
		// lighting model as part of occlusion float).
		#ifdef	bOcclusion
		float	occdiff			= tex2DB(sOcclusion, uv.xy, bias).x;

			#if ( AO_SOFTEN == 1 )
				occdiff			= max( occdiff, 1 - AO_AMOUNT );
			#endif

				// saturate to make it only AO in shadows (like occlusion)
				// otherwise vehicles and driver will be very dark in overcast skies
				tDiffuse.rgb	*= saturate( shadow + occdiff );
		#endif





		// wrap up
				tDiffuse.rgb	*= i.extinction.rgb;

				tDiffuse.rgb	+= NIGHT_DARKEN2 ( i.inscatter.rgb, night );
				tDiffuse.w		*= gMaterial.Emissive.a;

// DEBUG
// see how far apart things are in the shadow bands,
// so we can determine what sfx to kill at what distance
// nothing goes red.. which means not getting a slice 1 for some reason
// but getting green/blue slice 2/3, so we can cut things off on slice 3
/*
if ( slice == 0 )
// do nothing
if ( slice == 1 )
	tDiffuse.r *= 10;
if ( slice == 2 )
	tDiffuse.g *= 10;
if ( slice == 3 )
	tDiffuse.b *= 10;
*/


// only shaders that used the vertex shadow matrices to begin with
// have these bNoSlice flags set.. so, just b/c I was able to shoe-horn
// vertex shadows into some things doesn't mean the flags will work.
// and, anything that had pixel-side shadow matrix to begin with
// doesn't have these set. So, can't use them to branch workload.

/*
	// everything's green ... so flag not set
	#if defined(bNoSlice1)
		tDiffuse.r *= 10;
	#else
		tDiffuse.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice2)
		tDiffuse.r *= 10;
	#else
		tDiffuse.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice3)
		tDiffuse.r *= 10;	// slice 0, 1 turn red
	#else
		tDiffuse.g *= 10;	// slice 2, 3 turn green
	#endif
*/


		return	tDiffuse;
  	}
 


//-------------------------------------

// code doesn't seem to impact anything.. disabling
  	float4 ph_alpha0 ( VS_ScatOutput i ) : COLOR		{return 0.0;}

//-------------------------------------

/*
	asobo set breakamount to 0 in vertex shader,
	and hard-coded breakamount to 0 in pixel shader here.
	so pixel shader skipped all the bBroken stuff they coded.
	and was wasting time lerping on breakamount when it didn't need to.
	so, I just ripped it all out, save for the stuff that matters, like uv.
*/

	// GBuffer pass
	void ph_gbuffer( VS_GBufferOutput i,out PS_GBuffer o)
	{
		float2	uv			= i.tDiffuse.xy;

		#ifdef	bBroken
				uv.x		*= 0.5;
		#endif

		float4	tDiffuse	= tex2D(sDiffuse, uv);
		
		#ifdef bColoured
				tDiffuse.a	= 1.0;
		#endif


		float3	normal;

		#ifdef	bNormal												//Normal Map ?	
			#ifdef	bCompression
			float	bias		= 0;	// no shadow bias, so skip it, but need to use for tex2DB in tex2Ddist
					normal		= tex2Ddist( sNormal, uv, bias).xyz;
			#else
					normal		= tex2D( sNormal, uv).xyz;
			#endif
					normal		= normal * 2 - 1;
					normal		= mul(normal, i.TexSpace.axe);
//					normal		= normalize(normal);
		#else
			#ifdef	bNormalLocal
				#ifdef	bCompression
					normal = tex2D(sNormalLocal, uv).xyw;
				#else
					normal = tex2D(sNormalLocal, uv).xyz;
				#endif
					normal	= normal * 2 - 1;
//					normal 	= normalize(normal);
			#else
					normal = i.TexSpace.normal;						// Vertex normal
				#ifdef	bAddNormalLocal									// + Normal Map broken
//					normal = normalize(normal);
				#endif
			#endif
		#endif



		// Store normal in view space
		normal = mul( normal, gLocalToWorldNormalMatrix );
		normal = mul( normal, gViewRotMatrix );
		normal = normalize( normal );

//		o.Normal = float4(normal.xyz * 0.5 + 0.5, tDiffuse.a);
		o.Normal.xyz	= normal.xyz * 0.5 + 0.5;
		o.Normal.w		= tDiffuse.a;

//		o.Depth = float4(i.position2.z/i.position2.w, 0, 0, 1);
		o.Depth.x	= i.position2.z / i.position2.w;
		o.Depth.yz	= 0.0;
		o.Depth.w	= 1.0;
	}

#endif