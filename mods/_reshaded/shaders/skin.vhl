#ifndef	__SKIN_VHL__
#define	__SKIN_VHL__

#include "_vertex_const.h"
#include "skin.h"

//--------------------------------------

#ifndef	bVLight
	#ifdef	bOmni	
		float4 ProjSpotLight( float4 inPos, int id)
		{
			float4x4
				pm	= float4x4( c[id], c[id+1], c[id+2], c[id+3] );
				pm	= transpose ( pm );
			return	mul(inPos, pm);
		}

		float4 ProjSpotLight0( float4 inPos)	{return	ProjSpotLight(inPos, C_OMNI_0_PROJMATTEX);}
	#endif
#endif

//--------------------------------------

void Blend(VS_Output_Blended b, float2 inUV, inout VS_Output o)
{
			o.diffuse.xy = MaterialMat(inUV);
			o.position	= ProjectVertex( b.position );

	#ifdef	bVLight
			VertexLighting(b.position,b.normal,o);
	#else

		#ifdef	bNormal
	//Binormal * sign
	float3	vBinormal = cross(b.normal,b.tangent)*b.handedness;

	//Tangent Space
	float3x3	mLight;
				mLight[0]	= b.tangent;
				mLight[1]	= vBinormal;
				mLight[2]	= b.normal;
	OutTexSpace(o.TexSpace,mLight);
		#else
	OutTexSpace(o.TexSpace,b.normal);
		#endif

	#endif
}

//--------------------------------------

void vh_blend1(VS_Input_1Blend i, inout VS_Output o)
{
	VS_Output_Blended	b;
	Blend1(i,i.position,b);
	Blend(b,i.uv,o);
}

void vh_blend4(VS_Input_4Blend i, inout VS_Output o)
{
	VS_Output_Blended	b;
	Blend4(i,i.position,b);
	Blend(b,i.uv,o);
}

void vh_blend1_refract(VS_Input_1Blend i, inout VS_Output o)
{
	vh_blend1( i, o );
}

void vh_blend4_refract(VS_Input_4Blend i, inout VS_Output o)
{
	vh_blend4( i, o );
}

void vh_blend1_morph(VS_Input_1Blend i,
						float3 morph_d0 : POSITION3,
						float3 morph_d1 : POSITION4,
						float3 morph_d2 : POSITION5,
						float3 morph_d3 : POSITION6,
						inout VS_Output o)
{
	float4	position	= BlendMorph( i.position, morph_d0, morph_d1, morph_d2, morph_d3 );
	vh_blend1( i, o );
}

void vh_blend4_morph(VS_Input_4Blend i,
						float3 morph_d0 : POSITION4,
						float3 morph_d1 : POSITION5,
						float3 morph_d2 : POSITION6,
						float3 morph_d3 : POSITION7,
						inout VS_Output o)
{
	float4	position	= BlendMorph( i.position, morph_d0, morph_d1, morph_d2, morph_d3 );
	vh_blend4( i, o );
}

//---------------------------------------------

#endif