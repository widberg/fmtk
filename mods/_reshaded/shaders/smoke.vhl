#ifndef	__SMOKE_VHL__
#define	__SMOKE_VHL__

#include "_vertex_const.h"
#include "hlsl_const.h"
#include "hlsl_shadow.h"
#include "sfx.h"
#include "_vertex_scatter.h"
#include "smoke.h"

//-------------------------------------------

struct VS_SmokeIn
{
	float4	positionRotation			: POSITION;
	float4	uvscale						: TEXCOORD0;
	float4	rgba						: TEXCOORD1;
};

//-------------------------------------------

void vh_smoke (VS_SmokeIn i, out VS_SmokeOut o)
{
	float4	wPos;
			wPos.xyz	= i.positionRotation.xyz;
			wPos.w		= C_UNIT;
	
	float	angle		= i.positionRotation.w;
	float2	_sincos		= Sincos(angle);
	float2	scale 		= GetScaleRotation( i.uvscale.zw, _sincos.xy );
			wPos.xyz	+= scale.x * CAM_WSIDE.xyz
						+  scale.y * CAM_WUP.xyz;
	
	float4	vPos		= WorldToViewVertex(wPos);

#ifdef bShadowMap
	float3	tcproj				= vPos.xyz;
	float4	fromVS				= float4(tcproj.xyz, C_UNIT);
			o.shadowtcproj0.xyz = mul( fromVS, SLICE_MAT0 ).xyz;
			o.shadowtcproj1.xyz = mul( fromVS, SLICE_MAT1 ).xyz;
			o.shadowtcproj2.xyz = mul( fromVS, SLICE_MAT2 ).xyz;
			o.shadowtcproj3.xyz = mul( fromVS, SLICE_MAT3 ).xyz;
			o.shadowtcproj0.w	= tcproj.z;
#endif

			o.position		= ProjVertex(vPos);

	float3	eyevec			= EYE_WORLD.xyz - i.positionRotation.xyz;
	float	distToCamSq		= dot(eyevec, eyevec);
	float	fadeDistance	= C_TWO;
	float	FadeDistanceSq	= fadeDistance * fadeDistance;

	float4	diffuse			= i.rgba;

//	if (distToCamSq < FadeDistanceSq)
//			diffuse.a		*= distToCamSq / FadeDistanceSq;

	bool	fade			= step ( FadeDistanceSq, distToCamSq );
			diffuse.a		*= lerp( distToCamSq / FadeDistanceSq, 1, fade );


	float3	extinction;
	scattering(wPos, extinction, o.inscatter, o.sunlight.xyz, o.skylight.xyz);
	
//			o.skylight.xyz	+= AMBIENT_OCCLUSION_COLOR;

	// keep this? otherwise smoke too bright
	float	sundot			= saturate( DLIGHT_DIR.y );
			o.sunlight.xyz	= o.sunlight.xyz * sundot + o.skylight.xyz;	// MAD
//			o.sunlight.xyz	= o.sunlight.xyz * sundot + AMBIENT_OCCLUSION_COLOR;	// MAD

	float3	vcolor			= diffuse.rgb * extinction.rgb * C_TWO;
			o.skylight.a	= diffuse.a;
			o.sunlight.rgb	*= vcolor;
			o.skylight.rgb	*= vcolor;

			o.uv			= i.uvscale.xy;
}

#endif