#ifndef	__SFX_VHL__
#define	__SFX_VHL__

#include "_vertex_const.h"
#include "hlsl_math.h"
#include "sfx.h"
#include "_vertex_scatter.h"

//-------------------------------------------------------

float GetParameterValue( float4 Parameter, float Life )
{
	float4	loParams	= frac ( Parameter );
	float4	hiParams	= Parameter - loParams;
	float	hundred		= C_USER0.y;
			loParams	*= hundred;
			hiParams	/= hundred;

	float2	life;
			life.x		= Life;
			life.y		= sin ( Life * C_SINCOS1.x );
//	float	sinlife		= sin ( Life * C_SINCOS1.x );

//			loParams.x	*= Life;
//			hiParams.y	*= sinlife;
//			loParams.y	*= ( C_QUARTER + C_3QUARTER * Life );
//			hiParams.z	*= ( C_QUARTER + C_3QUARTER * sinlife );

			loParams.x	*= life.x;	// life
			hiParams.y	*= life.y;	// sinlife

			life		= C_QUARTER + C_3QUARTER * life;

			loParams.y	*= life.x;	// life
			hiParams.z	*= life.y;	// sinlife


	float	val			= dot ( hiParams.xyz, 1.0 )
						+ dot ( loParams.xy , 1.0 );

	float	invVal		= C_UNIT - val;
			val			= val + loParams.z * ( invVal - val );
			val			= pow ( val, hiParams.w );
	return	val;
}

float GetLightningInfluence(float4 lightningInfo, float3 vertexPos, float Range )
{
	float	distanceToLightning = distance(lightningInfo.xyz, vertexPos);
			distanceToLightning = saturate(distanceToLightning / Range);
			distanceToLightning = lightningInfo.w * (C_UNIT - distanceToLightning);
	return	distanceToLightning;
}

float FastFade(float life)
{
	float frontier		= C_USER2.x;
	float invfrontier	= C_USER2.y;
	return C_UNIT - saturate((life - frontier) / invfrontier);
}




//------------------------------------
// SCREEN SPLASHES
//------------------------------------

void vh_screenwater (VS_Sfx i, out VS_SfxWaterOut o)
{
	float	aspectRatio		= abs(VIEWPORT_HALF_SIZEX / VIEWPORT_HALF_SIZEY);
	float	angle			= i.positionRotation.w;
	float2	_sincos			= Sincos(angle);
	float2	scale 			= GetScaleRotation( i.uvscale.zw, _sincos.xy );
			scale.x			/= aspectRatio;

			o.position.xyz	= i.positionRotation.xyz;	// wPos
			o.position.xy	+= scale.xy;
			o.position.w	= C_UNIT;
			o.diffuse		= i.rgba;
			o.diffuse.a		= 1.0 - o.diffuse.a;			// moving here from pixel shader ( threshold )
			o.uv			= i.uvscale.xy;
			o.uvscreen		= o.position.xy;
			o.uvscreen.xy	= o.uvscreen.xy * 0.5 + 0.5;	// moving here from pixel shader
			o.uvscreen.y	= 1.0 - o.uvscreen.y;			// moving here from pixel shader

//	float2x2 matRot;
//			matRot[0]		= float2(_sincos.y, -_sincos.x);
//			matRot[1]		= _sincos.xy;

	float2x2
			matRot;
			matRot[0]		= _sincos.yx;
			matRot[0].y		= -matRot[0].y;	// -_sincos.x
			matRot[1]		= _sincos.xy;

	// light matrix (TBN .. tangent, binormal, normal)
	float3x3
			mLight;
			mLight[0]		= float3(C_UNIT, C_NULL, C_NULL);	// tangent
			mLight[1]		= float3(C_NULL, C_UNIT, C_NULL);	// binormal
			mLight[2]		= float3(C_NULL, C_NULL, C_UNIT);	// normal

//			mLight[0]		= C_RIGHT.xyz;						// tangent
//			mLight[1]		= C_UP.xyz;							// binormal
//			mLight[2]		= C_FRONT.xyz;						// normal

			mLight[1].xy	= mul(matRot, mLight[1].xy);
			mLight			= transpose ( mLight );

		// moved here from pixel shader
		o.screenvector		= float3 ( C_NULL, -C_UNIT, C_NULL );
//		o.screenvector		= C_UP.xyz;
//		o.screenvector.y	= -o.screenvector.y;	// flip y-axis from up to down
		o.screenvector		= mul ( o.screenvector, mLight );
}


//------------------------------------
// SCREEN DIRT BORDER + FLINGING MUD
//------------------------------------

void vh_screendirt (VS_Sfx i, out VS_SfxOutDirt o)
{
	float	aspectRatio		= abs(VIEWPORT_HALF_SIZEX / VIEWPORT_HALF_SIZEY);
	float	angle			= i.positionRotation.w;
	float2	_sincos			= Sincos(angle);
	float2	scale 			= GetScaleRotation( i.uvscale.zw, _sincos.xy );
			scale.x			/= aspectRatio;

			o.position.xyz	= i.positionRotation.xyz;	// wPos
			o.position.xy	+= scale.xy;
			o.position.w	= C_UNIT;
			o.diffuse		= i.rgba;
			o.uv			= i.uvscale.xy;
}



//------------------------------
// ph_sfxBase handles pixel-side rain, but this function
// doesn't do vertex-side rain (rain.vhl does that)
// not sure what this does...but game blows up w/o it
// (construction barricade?)
void vh_sfxBase (VS_Sfx i, out VS_SfxOutRainSnow o)
{
			o.position.xyz	= i.positionRotation.xyz;			// wPos
			o.position.w	= C_UNIT;
//			o.position		= WorldToViewVertex(o.position);	// lPos > vPos
//			o.position		= ProjVertex(o.position);			// vPos > oPos
			o.position		= WorldToProjVertex(o.position);	// lPos > oPos
			o.diffuse		= i.rgba;
			o.uv			= i.uvscale.xy;
			o.rain			= false;

//o.diffuse.r *= 10;	// highlight what this impacts
}


//------------------------------------
// LIGHTNING
//------------------------------------

void vh_lightning (VS_Sfx i, out VS_LightningOut o)
{
			o.position.xyz	= i.positionRotation.xyz			// wPos
							+ i.uvscale.z * CAM_WSIDE.xyz
							+ i.uvscale.w * CAM_WUP.xyz;
			o.position.w	= C_UNIT;

			scatteringbase ( o.position, o.extinction.xyz, o.inscatter.xyz );

//			o.position		= WorldToViewVertex(o.position);	// wPos > vPos
//			o.position		= ProjVertex(o.position);			// vPos > oPos
			o.position		= WorldToProjVertex(o.position);	// lPos > oPos
			o.diffuse		= i.rgba;
			o.diffuse.rgb	*= 4;//2;				// moved here from pixel shader, plus made brighter
//			o.diffuse.rgb	*= o.extinction.rgb;	// moved here from pixel shader
			o.uvFog.xy		= i.uvscale.xy;
			o.uvFog.z		= i.positionRotation.w;
}



//------------------------------------
// HUD
//------------------------------------

void vh_billboard (VS_Sfx i, out VS_SfxOutHUD o)
{
	float	angle			= i.positionRotation.w;
	float2	_sincos			= Sincos(angle);
	float2	scale 			= GetScaleRotation( i.uvscale.zw, _sincos.xy );

			o.position.xyz	= i.positionRotation.xyz			// wPos
							+ scale.x * CAM_WSIDE.xyz
							+ scale.y * CAM_WUP.xyz;
			o.position.w	= C_UNIT;
//			o.position		= WorldToViewVertex(o.position);	// wPos > vPos
//			o.position		= ProjVertex(o.position);			// vPos > oPos
			o.position		= WorldToProjVertex(o.position);	// lPos > oPos
			o.uv			= i.uvscale.xy;
			o.diffuse		= i.rgba;
			o.diffuse.rgb	*= 2;					// added from pixel shader
	#if	( BRIGHTER_GPS == 1 )
			o.diffuse.rgb	*= 100;
	#endif
			o.diffuse.a		*= GPS_TRANSPARENCY;	// make transparent along with other UI elements
}


//------------------------------------
// SPARKS
//------------------------------------

// TODO - add scattering just in case?

void vh_soft_nolighting (VS_Sfx i, out VS_SfxSoftNoLightingOut o)
{
	float	angle 			= i.positionRotation.w;
	float2	_sincos 		= Sincos(angle);
	float2	scale 			= GetScaleRotation( i.uvscale.zw, _sincos.xy );

			o.position.xyz	= i.positionRotation.xyz			// wPos
							+ scale.x * CAM_WSIDE.xyz
							+ scale.y * CAM_WUP.xyz;
			o.position.w	= C_UNIT;
//			o.position		= WorldToViewVertex(o.position);	// vPos
//			o.position		= ProjVertex(o.position);			// oPos
			o.position		= WorldToProjVertex(o.position);	// oPos
			o.diffuse		= i.rgba;
			o.uv			= i.uvscale.xy;
			o.uvscreen		= o.position;
}


//------------------------------------
// SKY CLOUDS
//------------------------------------

// handles how the clouds in sky look,
// including how lightning strikes make them flash

void vh_cloud (VS_Sfx i, out VS_SfxScatteringOut o)
{
	float	Cloudness			= C_USER0.x;
	float	CloudsAlpha			= C_USER0.y;
	float	AppearanceZone		= C_USER6.y;
	float	SightLine			= C_USER6.z;
	float	downHeight			= C_USER5.x;

	float4	position;
			position.xyz		= i.positionRotation.xyz;
			position.y 			+= C_USER6.w;
			position.w			= C_UNIT;

//	float3	vEye 				= position.xyz - EYE_WORLD.xyz;
//	float	vEyelen				= length(vEye);
	float	vEyelen				= distance(EYE_WORLD.xyz, position.xyz);
	float	vEyelenAppear		= vEyelen / AppearanceZone;
	float	scaleFactor			= lerp(C_UNIT, C_3QUARTER, vEyelenAppear);

	if (vEyelen > AppearanceZone)
			scaleFactor			= C_NULL;

	float	downFactor			= lerp(C_NULL, downHeight, vEyelenAppear);

			position.y			+= downFactor;
	
	float3	viewDir				= normalize(position.xyz - EYE_WORLD.xyz);
	float3	right				= normalize(cross(viewDir, float3(C_NULL, C_UNIT, C_NULL)));
//	float3	right				= normalize(cross(viewDir, C_UP));
	float3	up					= cross(right, viewDir);

	float4	vviewPosition;
			vviewPosition.xyz 	= position.xyz
								+ i.uvscale.z * scaleFactor * right
								+ i.uvscale.w * scaleFactor * up;
			vviewPosition.w		= position.w;

			o.position			= WorldToProjVertex(vviewPosition);

	float4	diffuse;
			diffuse.xyz			= i.rgba.xyz * CloudsAlpha;
			diffuse.w			= C_UNIT;

	float	s					= (C_UNIT - (C_UNIT + sign(i.uvscale.w)) * C_HALF);
			diffuse.rgb			*= (C_UNIT - (Cloudness * s));
	

	float	MaxDistanceToLightning = C_USER6.x;

	float	intensityModulated	= GetLightningInfluence(C_USER1, vviewPosition.xyz, MaxDistanceToLightning)
								+ GetLightningInfluence(C_USER2, vviewPosition.xyz, MaxDistanceToLightning)
								+ GetLightningInfluence(C_USER3, vviewPosition.xyz, MaxDistanceToLightning)
								+ GetLightningInfluence(C_USER4, vviewPosition.xyz, MaxDistanceToLightning);

			diffuse.a			*= saturate(C_UNIT - (vEyelen - (SightLine - AppearanceZone)) / AppearanceZone);


	float3	extinction;
	float3	skylight;
	scattering(vviewPosition, extinction, o.inscatter.xyz, o.sunlight.xyz, skylight.xyz);

	// keep this? otherwise clouds too bright in sky
	float	sundot				= saturate( DLIGHT_DIR.y );
			o.sunlight.xyz		= o.sunlight.xyz * sundot + skylight.xyz;// + AMBIENT_OCCLUSION_COLOR;	// MAD
//			o.sunlight.xyz		= o.sunlight.xyz * sundot + AMBIENT_OCCLUSION_COLOR;	// MAD

	float3	vcolor;
			vcolor.xyz			= diffuse.xyz * extinction.xyz;
			vcolor.xyz 			+= intensityModulated;
			vcolor.xyz 			*= C_TWO;
			o.sunlight.xyz		*= vcolor;
			o.sunlight.w		= diffuse.a;
			o.uv				= i.uvscale.xy;
}



//------------------------------------
// WHEEL FX (for Player) & DUST CLOUDS (that blow towards you in storms)
//------------------------------------

void vh_billboard_soft (VS_Sfx i, out VS_SfxSoftOut o)
{
	float4	position;
			position.xyz		= i.positionRotation.xyz;
			position.w			= C_UNIT;

	float	FadeToCameraDistance 	= C_USER1.x;
	float	FadeOutToCameraDistance = C_USER1.y;

	float	distanceToCamera	= distance(EYE_WORLD, position);
			distanceToCamera	-= FadeOutToCameraDistance;
			FadeToCameraDistance -=FadeOutToCameraDistance;
	float	alphaCamera			= saturate( distanceToCamera / FadeToCameraDistance);

	float4	diffuse				= i.rgba;
			diffuse.a			*= alphaCamera;

	if (diffuse.a > C_USER1.z)
	{
		float	angle			= i.positionRotation.w;
		float2	_sincos			= Sincos(angle);
		float2	scale 			= GetScaleRotation( i.uvscale.zw, _sincos.xy );
				position.xyz	+= scale.x * CAM_WSIDE.xyz
								+  scale.y * CAM_WUP.xyz;
	}

	float4	vPos				= WorldToViewVertex(position);

#ifdef bShadowMap
		float3 tcproj = vPos.xyz;
		float4 fromVS = float4(tcproj.xyz,C_UNIT);
		o.shadowtcproj0.xyz = mul( fromVS, SLICE_MAT0 ).xyz;
		o.shadowtcproj1.xyz = mul( fromVS, SLICE_MAT1 ).xyz;
		o.shadowtcproj2.xyz = mul( fromVS, SLICE_MAT2 ).xyz;
		o.shadowtcproj3.xyz = mul( fromVS, SLICE_MAT3 ).xyz;
		o.shadowtcproj0.w = tcproj.z;
#endif

	o.position = ProjVertex(vPos);

	o.uv = i.uvscale.xy;


	float3	extinction;
			scattering(position, extinction, o.inscatter, o.sunlight.xyz, o.skylight.xyz);

//			o.skylight.xyz	+= AMBIENT_OCCLUSION_COLOR;	// original code doesn't add ambient light

	// keep this? otherwise dust is really bright
	float	sundot			= saturate( DLIGHT_DIR.y );
			o.sunlight.xyz	= o.sunlight.xyz * sundot
							+ o.skylight.xyz;
//							+ AMBIENT_OCCLUSION_COLOR;	// original code doesn't add ambient light
	
	float3	vcolor			= diffuse.xyz * C_TWO * extinction.xyz;
			o.sunlight.xyz	*= vcolor;
			o.skylight.xyz	*= vcolor;
			o.sunlight.w	= diffuse.w;
			o.skylight.w	= diffuse.w;

			o.uvscreen		= o.position;
}


//-----------------------------------------------
// WHEEL FX (AI vehicles) & BILLOWY DUST (that shows up en masse behind player & opponent vehicles)
//-----------------------------------------------

void vh_bboard_soft_static (VS_SfxStatic i, out VS_SfxSoftOut o)
{
	float	FadeToCameraDistance	= C_USER1.x;
	float	FadeOutToCameraDistance	= C_USER1.y;
	float	spawntime				= i.Life.z;
	float	RotationSpeed			= i.Life.w;
	float	dTime					= C_USER0.x - spawntime;
	float	life					= dTime / i.Life.y;

	float4	position;
			position.xyz			= i.positionRotation.xyz
									+ dTime * i.Speed.xyz
									+ dTime * dTime * C_HALF * i.Acceleration.xyz;
			position.w				= C_UNIT;
	

	float4	diffuse;

	if (life > C_UNIT)
	{
			diffuse.rgba			= C_NULL;
	}
	else
	{
		float	distanceToCamera		= distance(EYE_WORLD, position);
				distanceToCamera		-= FadeOutToCameraDistance;
				FadeToCameraDistance	-= FadeOutToCameraDistance;
		float	alphaCamera				= saturate(distanceToCamera / FadeToCameraDistance);

				diffuse 				= i.rgba;
				diffuse.a 				*= GetParameterValue(i.AlphaParameters, life) * alphaCamera;
				diffuse.a 				*= FastFade(life);
		if (diffuse.a > C_USER1.z)
		{
			float	angle 			= i.positionRotation.w + dTime * RotationSpeed;
			float2	_sincos 		= Sincos(angle);
			float2	vertScale		= i.uvscale.zw;
			float	three			= C_HALF + C_TWO;
					vertScale		= clamp(vertScale, -three, three);
			float2	scale 			= GetScaleRotation( vertScale.xy, _sincos.xy );
					scale.xy		*= GetParameterValue(i.ScaleParameters, life);
					position.xyz	+= scale.x * CAM_WSIDE.xyz
									+  scale.y * CAM_WUP.xyz;
		}
	}

	float4	vPos = WorldToViewVertex(position);

	#ifdef bShadowMap
	float3	tcproj = vPos.xyz;
	float4	fromVS = float4(tcproj.xyz,C_UNIT);
			o.shadowtcproj0.xyz = mul( fromVS, SLICE_MAT0 ).xyz;
			o.shadowtcproj1.xyz = mul( fromVS, SLICE_MAT1 ).xyz;
			o.shadowtcproj2.xyz = mul( fromVS, SLICE_MAT2 ).xyz;
			o.shadowtcproj3.xyz = mul( fromVS, SLICE_MAT3 ).xyz;
			o.shadowtcproj0.w = tcproj.z;
	#endif

			o.position		= ProjVertex(vPos);
			o.uv			= i.uvscale.xy;


	float3	extinction;
	scattering(position, extinction, o.inscatter, o.sunlight.xyz, o.skylight.xyz);

//			o.skylight.xyz	+= AMBIENT_OCCLUSION_COLOR;	// original code doesn't add ambient light

	// keep this? otherwise dust is really bright
	float	sundot			= saturate( DLIGHT_DIR.y );
			o.sunlight.xyz	= o.sunlight.xyz * sundot
							+ o.skylight.xyz;
//							+ AMBIENT_OCCLUSION_COLOR;

	float3	vcolor			= diffuse.xyz * C_TWO * extinction.xyz;
			o.sunlight.xyz	*= vcolor;
			o.skylight.xyz	*= vcolor;
			o.sunlight.w	= diffuse.w;
			o.skylight.w	= diffuse.w;

			o.uvscreen		= o.position;
}

#endif