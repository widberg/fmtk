#ifndef	__MESH_VHL__
#define	__MESH_VHL__

#include "_vertex_const.h"
#include "hlsl_math.h"

//-------------------------------

// dummy struct to disable stuff with
struct	VS_Blank	{float4	position : POSITION;};


struct VS_Input
{
	float4	position	: POSITION;
	float4	tangent		: POSITION1;
	float3	normal		: NORMAL;
	float2	uv			: TEXCOORD0;
//	float2	luv			: TEXCOORD1;
};


//-------------------------------


// disabling
void vh_zonly ( float4 iPosition : POSITION, out float4 oPosition : POSITION )
{
	oPosition = iPosition;
}

//-------------------------------

// keep this ... controls reset screen after crashing
// but doesn't seem to impact anything else
// so maybe find a way to optimize the outputs?

	//passe de base, avec 1 omni
	void vh_base(VS_Input i, inout VS_Output o)
	{
		float3	normal		= i.normal * C_TWO - C_UNIT;
				o.diffuse.xy = MaterialMat(i.uv);
				o.position	= ProjectVertex( i.position );

	#ifdef	bVLight
		VertexLighting(i.position, normal, o);
	#else	
		#ifdef	bNormal
			float3x3 mLight	= LightMat(i.tangent, normal);
			OutTexSpace(o.TexSpace, mLight);
		#else
			OutTexSpace(o.TexSpace, normal);
		#endif
	#endif
	}

//-------------------------------

// disabling .. not used
void	vh_rbase	( out VS_Blank o ) {o.position = 0;}
void	vh_water	( out VS_Blank o ) {o.position = 0;}

//-------------------------------

#ifndef	bVLight

	// disabling .. not used
	void	vh_base_omni	( out VS_Blank o ) {o.position = 0;}
	void	vh_refraction	( out VS_Blank o ) {o.position = 0;}

#endif

#endif