#ifndef	__TORNADO_PHL__
#define	__TORNADO_PHL__

#include "hlsl_const.h"
#include "__setup.h"
#include "_pixel.h"
#include "tornado.h"
//#include "scattering_light.h"	// blows up trying to use this, not sure why

//------------------------------------------
/*
	since tornadoes are a main set piece, I decided
	to go with calculations that provided the best
	looks as opposed to best performance below.

	EG: the rotating cloud in the sky can just be
	a simple diffuse w/o normal maps, and use sunlight
	piped in from vertex shader. But, keeping it a
	normal map helps add that little extra body to it
	in light which adds a bit more realism.

	also, let's not downsample sand or tornadoes.
	they need to be crisp, clear textures,
	as a prominent weather feature in races.

*/
//------------------------------------------

void sfxGetZBufferTornado(float4 SamplePos, out float ZInBuffer, out float CurrentZ)
{
	float4	samplePos		= SamplePos;
			samplePos		/= samplePos.w;

			// Remap from [-1,1] to [0,1] & Invert Y
			samplePos.xy	= samplePos.xy * 0.5 + 0.5f;
			samplePos.y		= 1 - samplePos.y;

			samplePos.xy	= samplePos.xy * gViewportScaleOffset2.zw + gViewportScaleOffset2.xy;

			ZInBuffer		= texDepth2D( sZBuffer, samplePos.xy ).x;
			CurrentZ		= samplePos.z;

	float4	screenPos 		= float4( samplePos.xy, ZInBuffer, 1.f);
	float4	viewPos			= mul(screenPos, gInvProjMatrix);
			ZInBuffer		= viewPos.z / viewPos.w;

			screenPos.z		= CurrentZ;
			viewPos			= mul(screenPos, gInvProjMatrix);
			CurrentZ		= viewPos.z / viewPos.w;
}

float3 lightingtornado(	float3 normal, float3 eyevec)
{
	float3	sunvec				= gDLight.Dir.xyz;

	// fake fresnel for direct sunlight
	float	fakefresnelLight	= dot(sunvec, eyevec);
			fakefresnelLight	= saturate(fakefresnelLight);
	float	normEyedot			= 1 - abs( dot(normal, eyevec) );	// saturate this dot?
			fakefresnelLight 	*= normEyedot;
	float	sundot				= dot(normal, sunvec);
			sundot				-= fakefresnelLight;
			sundot				= saturate ( sundot );

	// blows up trying to use these, not sure why
//	float3	suncol				= SetSunColor() * sundot
//								+ SetSkyColor()
//								+ SetAmbColor();

	float3	suncol				= gDSunColor.rgb * sundot
								+ gDSkyColor.rgb
								+ AMBIENT_OCCLUSION_COLOR;

	return	suncol;
}


//-------------------------------------------
// doesn't seem to be used, so neutering code
//-------------------------------------------

float4 ph_tornadosmoke () : COLOR	{return	0;}


//------------------------------------------------
// billowy dust that follows base of funnel
//------------------------------------------------

float4 ph_tornadosoftsmoke (VS_TornadoSoftSmokeOut i) : COLOR
{
	float4	color		= tex2D(sDiffuse, i.uv);
			color.a	  	*= i.diffuse.a;
			color.rgb	= color.rgb * i.sunlight.rgb + i.inscatter.rgb;	// should MAD better

	float	ZBufferSample, ZAtPosition;
	sfxGetZBufferTornado(i.uvscreen, ZBufferSample, ZAtPosition);

	float	ZSample		= ZBufferSample - ZAtPosition;
	float	alphaZ		= saturate( ZSample / 50.f );

	float T = 2;

	if (ZBufferSample < ZAtPosition)
	{
		if (ZBufferSample < T)
			alphaZ = 1;
		else
			alphaZ = 0;
	}

			color.a		*= alphaZ;
	return	color;
}


//------------------------------------------------
// rotating sky clouds around top of funnel
//------------------------------------------------

// rotating cloud looks fine w/o TBN matrix
float4 ph_tornadoclouds(VS_Tornado_Cloud_Output i) : COLOR
{
	float3	normal;
			normal.xy		= tex2D( sNormal, i.uv.xy).wy * 2 - 1;

	#if	( CHEAPER_TEXTURE_CALCS == 1 )
			normal.z		= 1 - abs( normal.x - normal.y );
	#else
			normal.z		= sqrt(1 - dot(normal.xy, normal.xy));
	#endif

			normal			= normalize(normal);
			normal.y 		= -normal.y;

	float3	eyevec			= normalize(i.eyevec.xyz);
    float4	tDiffuse		= tex2D(sDiffuse, i.uv.xy);
			tDiffuse.rgb 	*= lightingtornado( normal, eyevec );
			tDiffuse.rgb 	= tDiffuse.rgb * i.extinction.rgb + i.inscatter.rgb;	// MAD
	return	tDiffuse;
}


//------------------------------------------------
// tornado funnel
//------------------------------------------------

float4 ph_tornado(VS_Tornado_Funnel_Output i) : COLOR
{
	float3	normal1;
			normal1.xy		= tex2D( sNormal, i.uv.xy ).wy * 2 - 1;
	float3	normal2;
			normal2.xy		= tex2D( sNormal, i.uv.zw ).wy * 2 - 1;

	#if	( CHEAPER_TEXTURE_CALCS == 1 )
			normal1.z		= 1 - abs ( normal1.x - normal1.y );
			normal2.z		= 1 - abs ( normal2.x - normal2.y );
	#else
			normal1.z		= sqrt( 1 - dot( normal1.xy, normal1.xy ) );
			normal2.z		= sqrt( 1 - dot( normal2.xy, normal2.xy ) );
	#endif
	
	float3	normal 			= lerp(normal1, normal2, i.eyevec.w);
			normal 			= mul(normal, i.TBNmatrix);
			normal 			= normalize(normal);

	float3	eyevec			= normalize(i.eyevec.xyz);
	float	coefTop 		= 1.5;

    float4	tDiffuse;
			tDiffuse.rgb	= tex2D(sDiffuse, i.uv.xy).rgb;
			tDiffuse.rgb 	*= lightingtornado(	normal, eyevec );
			tDiffuse.rgb	= tDiffuse.rgb * i.extinction.rgb + i.inscatter.rgb;	// MAD

			tDiffuse.w		= dot(eyevec.xz, normal.xz)
							+ abs(eyevec.y * normal.y) * coefTop;
			tDiffuse.w		= pow(tDiffuse.w, 3) * 4;
			tDiffuse.w		= saturate(tDiffuse.w);
			tDiffuse.w		*= i.alpha.x;
	return	tDiffuse;
}

#endif