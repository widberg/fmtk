#ifndef	__DECAL_VHL__
#define	__DECAL_VHL__

#include "_vertex_const.h"
#include "sfx.h"
#include "_vertex_scatter.h"
#include "decal.h"

//------------------------------------

struct VS_In_Decal
{
	float4		positionRotation	: POSITION0;
	float4		uvscale				: TEXCOORD0;
	float4		rgba				: TEXCOORD1;	// don't make this COLOR
	float4		normal				: TEXCOORD2;	// don't make this NORMAL
	float2		DeepnessTarmac		: TEXCOORD3;	// .x bump value // .y flattens track on asphalt to make skid marks
};

//------------------------------------

void vh_decal (VS_In_Decal i, out VS_Out_Decal o)
{
// original
//			o.eyevec		= EYE_WORLD.xyz - i.positionRotation.xyz;

    float4	wPos;
			wPos.xyz		= i.positionRotation.xyz
							+ i.normal.xyz * i.normal.w;	// don't normalize normal here
			wPos.w			= C_UNIT;

// moved eyevec here to use wPos after it processes like pretty much every other shader does
			o.eyevec		= EYE_WORLD.xyz - wPos.xyz;


	float4	vPos			= WorldToViewVertex (wPos);
	float4	position		= ProjVertex(vPos);


	// keep TBN's normalized, or bump mapping won't work right in pixel shader
	float3	vTangentWS;
			vTangentWS.xy	= i.uvscale.zw;
			vTangentWS.z	= i.positionRotation.w;
			vTangentWS		= normalize(vTangentWS);
	float3	vNormalWS		= i.normal.xyz;
			vNormalWS		= normalize(vNormalWS);
	float3	vBinormalWS		= cross(vNormalWS, vTangentWS);
			vBinormalWS		= normalize(vBinormalWS);

			o.TBNmatrix		= float3x3(vTangentWS, vBinormalWS, vNormalWS);

	scatteringbase(wPos, o.extinction, o.inscatter);

			o.position			= position;
			o.diffuse			= i.rgba;
			o.diffuse.a			*= 0.75;	// make tire tracks a bit more transparent to let ground color show through
			o.uvDeepTarmac.xy	= i.uvscale.xy;
			o.uvDeepTarmac.zw	= i.DeepnessTarmac.xy;

	#ifdef	bShadowMap
			o.shadowtcproj	= vPos.xyz;
	#endif

	#ifdef	bOmni
	// only filling 3 floats on omni.xyz
	// DirectX is column-major, so mul wPos.xyzw by 4 columns (xyzw) of 3 rows and skip processing 4th
	// since we don't have a .w to stuff it in
			o.omni.xyz		= mul(wPos, C_OMNI_0_WORLDTOLOCAL ).xyz * C_HALF + C_HALF;
	#endif
}

#endif
