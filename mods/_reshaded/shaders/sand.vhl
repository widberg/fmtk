#ifndef	__SAND_VHL__
#define	__SAND_VHL__

#define bNormal

#include "_vertex_const.h"
#include "sfx.h"
#include "_vertex_scatter.h"
#include "sand.h"

//-------------------------------------------------------

struct VS_SandStorm
{
	float4 position			: POSITION;
	float4 normalU			: TEXCOORD0;
	float4 tangentV			: TEXCOORD1;
	float4 diffuse			: TEXCOORD2;
	float3 binormal			: TEXCOORD3;
};

//-------------------------------------------------------

void vh_sandstorm(VS_SandStorm i, out VS_SandStorm_Output o)
{
	float2	UVDiffuseScale		= C_USER0.xy;
	float2	UVDiffuseOffset		= C_USER0.zw;
	float2	UVNormalScale		= C_USER1.xy;
	float2	UVNormalOffset		= C_USER1.zw;
	float2	UVNormal2Scale		= C_USER2.xy;
	float2	UVNormal2Speed		= C_USER2.z;

	float	Alpha				= C_USER3.x;
	
	float2	uv					= float2(i.normalU.w, i.tangentV.w);

			o.uvDiffuse.xy		= uv * UVDiffuseScale
								     + UVDiffuseOffset;
			o.uvDiffuse.y		= saturate((C_UNIT - uv.y) * UVDiffuseScale.y);

			// normal1 uv
			o.uvNormals.xy		= uv * UVNormalScale
								     + UVNormalOffset;
			// normal2 uv
			o.uvNormals.zw		= uv * UVNormal2Scale
								- UVNormalOffset.yy * UVNormal2Speed;

	float4	wPos;
			o.position.xyz		= i.position.xyz;
			o.position.w		= C_UNIT;
			o.position			= WorldAndProjectVertex(o.position, wPos);


	float3	vNormalWS			=  normalize(i.normalU).xyz;
	float3	vTangentWS			= -normalize(i.tangentV).xyz;
	float3	vBinormalWS			=  normalize(i.binormal).xyz;

			o.TBNmatrix			= float3x3(vTangentWS, vBinormalWS, vNormalWS);

			o.eyevec.xyz		= EYE_WORLD - wPos.xyz;

	scatteringbase(wPos, o.extinction.xyz, o.inscatter.xyz);

			o.diffuse.rgb		= i.diffuse.rgb;
			o.diffuse.a			= Alpha;
/*
	float	alpha			= dot(i.TBNmatrix[2].xyz, i.eyevec.xyz);
			alpha			= pow(alpha, 1.5) * 5;
			alpha			= saturate(alpha) * i.diffuse.a;
*/
/*
	// pixel shader dot's i.TexSpace.axe2.xyz with eyevec
	// i.TexSpace.axe2.xyz is transposed from vertex to pixel shader
	// so xyz, xyz, xyz becomes xxx, yyy, zzz..
	// i.TexSpace.axe2.xyz is the 3rd float3 (axe0, axe1, axe2)
	// so we can simulate it here by taking the .z's from each TBN
	float3	alphaMod			= float3( vTangentWS.z, vNormalWS.z, vBinormalWS.z);

	float3	alphaModifier		= float3( vTangentWS.z, vNormalWS.z, vBinormalWS.z);
	float	alpha				= dot ( alphaModifier, o.eyevec.xyz );
			alpha				= pow ( alpha, 1.5 ) * 5.0;
			alpha				= saturate ( alpha ) * o.diffuse.a;
			alpha				= clamp ( alpha, C_NULL, C_UNIT ) * o.diffuse.a;

			o.diffuse.a			*= Alpha;
*/
}


// vh_sand and ph_sand don't seem to do anything, so neutering the code
struct VS_Blank{float4	position : POSITION;};
void vh_sand ( out VS_Blank o) {o.position = 0.0;}

#endif