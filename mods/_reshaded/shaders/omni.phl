#ifndef	__OMNI_PHL__
#define	__OMNI_PHL__

#include "hlsl_const.h"
#include "hlsl_math.h"
#include "_vertex_const.h"
#include "_pixel.h"

//--------------------------------------------------

float4			gDOmniPos;			// Deferred omnis
//float4		gDOmniDir;
float3			gDOmniDir;
float4			gDOmniValue;
//float4		gDOmniColor;
float3			gDOmniColor;
//float4x4		gDOmniProjMatrix;

sampler2D				sGBuffer0;
//sampler2D				sGBuffer1;
//sampler2D				sGBuffer2;
//sampler2D				sGBuffer3;

#define	BACKOMNIPOWER	1//2	// how much the rider/vehicle will be lit up by headlights behind the headlights (eg: light up engine block)

//--------------------------------------------------
// Light prepass renderer - Draw a screenspace omni and accumulate in light buffer
//--------------------------------------------------

// new .. merged fragment into main & optimized
	float4 main ( float2 vPos : VPOS ) : COLOR0
	{
		float2	uv				= GetDeferredLightsPosition(vPos);

		// Fragment position - rebuild view space position
		float	storedZ			= texDepth2D ( sZBuffer, uv );

		float2	screenPos2D		= uv * 2.0 - 1.0;
				screenPos2D.y	= -screenPos2D.y;
		float4	screenPos3D;
				screenPos3D.xy	= screenPos2D.xy;
				screenPos3D.z	= storedZ;
				screenPos3D.w	= 1.0;
		float4	viewPos			= mul ( screenPos3D, gInvProjMatrix );
		float3	pos				= viewPos.xyz / viewPos.w;


		// Compute spot
		float3	omnipos			= gDOmniPos.xyz - pos;
		float	d				= dot ( omnipos, omnipos );
		float3	v				= omnipos * rsqrt ( d );	// v = normalize ( omnipos ), but we use d in other places below, so doing it this way


		// Normal Attenuation
		float3	nrm				= tex2D ( sGBuffer0, uv ).xyz * 2.0 - 1.0;
		float	f				= dot ( gDOmniDir.xyz, v );
//		float3	dotter			= ( f < 0.0 ) ? v : gDOmniDir.xyz;
		float	fstep			= step( f, 0.0 );
//		float3	dotter			= lerp( gDOmniDir.xyz, v, fstep );
		float3	dotter			= Select( gDOmniDir.xyz, v, fstep );
		float	n				= dot ( dotter, nrm );
				n				= saturate ( n );


		// Range Attenuation (Dist^2)
		float	r				= ( d - gDOmniValue.x ) * gDOmniValue.y;
				r				= saturate ( 1.0 - r );
				r				= pow ( r, 3 );


		// Cut Off Attenuation (how much the headlights light the rider/vehicle behind them)
		float	up				= saturate ( 0.33 - v.y * 0.67 - d * 0.5 );
//				up				*= BACKOMNIPOWER;	// I set it to 1 and like it, so skip multiplying by 1 (pointless)
				f				= f * gDOmniValue.z + gDOmniValue.w;
				f				= saturate ( 1.0 - f );
		float	c				= up + ( 1.0 - up ) * f;

		// Diffuse term
		float4	color;
				color.a			= 1.0;
				color.rgb		= gDOmniColor.rgb;
				color.rgb		*= ( r * n * c * gDOmniPos.w ); // mul the float1's before mul'ing by float3

		// brighten headlights during darker nights, otherwise
		// dynamic lum washes them out
				color.rgb		= NIGHT_LIGHTEN ( color.rgb );
		return	color;
	}

#endif