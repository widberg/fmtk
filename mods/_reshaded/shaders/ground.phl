#ifndef	__GROUND_PHL__
#define	__GROUND_PHL__

#include "hlsl_math.h"
#include "hlsl_shadow.h"
#include "_vertex_const.h"
#include "hlsl_math.h"
#include "scattering_light.h"
#include "ground.h"
#include "_pixel.h"
//#include "__setup.h"

//-------------------------------------------------

sampler2D	sBumpMap0;
sampler2D	sBumpMap1;
sampler2D	sBumpMap2;

//-------------------------------------------------

float4 ph_base(VS_GroundOutput i, float2 vPos : VPOS) : COLOR0
{
	//---------------------------------------
	// prep shadows, b/c slice might be used for texture pull
	//---------------------------------------

	int		slice			= 0;
	float	shadow			= SHADOW_PXL_TRI( slice );
	float	bias			= SET_BIAS( slice );	// do this after shadow, b/c shadow sets slice

	#ifdef	bCompression
	float4	normal0			= tex2DB(sBumpMap0, i.uv.zw, bias).xywz;
	float4	normal1			= tex2DB(sBumpMap1, i.uv.zw, bias).xywz;
	float4	normal2			= tex2DB(sBumpMap2, i.uv.zw, bias).xywz;
	#else
	float4	normal0			= tex2DB(sBumpMap0, i.uv.zw, bias).xyzw;
	float4	normal1			= tex2DB(sBumpMap1, i.uv.zw, bias).xyzw;
	float4	normal2			= tex2DB(sBumpMap2, i.uv.zw, bias).xyzw;
	#endif

	#ifndef	bNoDecal
	float4	decal			= tex2DB(sDiffuse, i.uv.xy, bias);
	#endif



	//---------------------------------------
	// do some non-texture calculations to give
	// texture pulls time to process and hopefully
	// smooth out frame times
	//---------------------------------------

	float3	omni			= GetDeferredLights(vPos.xy, bias) * 2;	// headlights
	float3	sunvec			= normalize(i.sundir.xyz);
	float3	eyevec			= normalize(i.eyevec.xyz);
	float	spccol			= GetSpecular(i);
	float	spcpow			= 15;
	float	night			= IS_NIGHT;
	float	occlusion		= GetOcclusion(i);
	lights	light			= SetLightColors( shadow );

	// AO spot under vehicles
	#ifdef	bOmni
			occlusion		*= GetOmniOcclusion( i.omni.xyz, bias );
	#endif

			occlusion		= SaturateOcclusion ( occlusion, shadow );	// AO only occurs in shadows

	//---------------------------------------
	// start processing textures
	//---------------------------------------

	float4	normal			= lerp(normal0, normal1, GetBump1Lerp(i));
			normal			= lerp(normal,  normal2, GetBump2Lerp(i));
			normal 			*= 2;
			normal.xyz 		-= 1;						// only .xyz -1, leave .w alone
			normal.xyz		= normalize(normal.xyz);	// only .xyz normalize, leave .w alone

	float4	tDiffuse		= i.color;
			tDiffuse.rgb	*= normal.w;	// .w seems to handle near/distant texture blending (more detailed textures blending in)


	// Diffuse map (road decals for yellow lines on asphalt, tire tracks on dirt roads)
	#ifndef	bNoDecal
			decal.a 		*= i.eyevec.w;
			tDiffuse.rgb	= lerp( tDiffuse.rgb, decal.rgb, decal.a );

			// darken asphalt & dirt track areas as it rains
			// using decal.a helps smoothly blend the darkening into
			// non-decaled areas

// skip this.. road decals don't blend on some areas of aphalt,
// making undarkened patches with squarish decal perimeters. (ie: looks tacky)
//			tDiffuse.rgb	= lerp( tDiffuse.rgb, tDiffuse.rgb * 0.3, decal.a * gGlobalWetness );

		#if ( PATH_FINDER == 1 )
		if ( decal.a > 0.1 )
		{
	float	highlight		= dot ( i.inscatter.rgb, 0.33 )		// as haze increases, increase highlight
							* dot ( decal.rgb, 0.1 );			// highlight brighter parts of roads / dirt tire tracks
//							* dot( gDSkyColor.rgb, 0.33 );		// at night, highlight more
			highlight		= saturate( highlight );

			i.inscatter.g	= lerp(i.inscatter.g, i.inscatter.g * 3, highlight * decal.a );		// neutralize the inscatter to make it easier to see
		}
		#endif
	#endif


	float3	spcref			= reflect( -eyevec, normal.xyz );

	// wrap up lighting and color return
	float3	dots			= lightdots(normal.xyz, sunvec, spcref, spcpow, occlusion);
			dots.z			*= spccol;	// spccol is float, so mul by dot here
			light.sky		= ShadowHighlight( light.sky, dots, eyevec, normal.xyz );

	// do rain sheen after shadow highlight,
	// or shadow highlight negates sheen
	#if ( RAIN_SHEEN == 1 )
	float3	reflection		= GetCubeMap( spcref, bias );
	float	wetness			= spccol * 0.5 + 0.25;
			light			= SetLightWetness( light, reflection, wetness, night );
	#endif

			light			= lightcols( dots, light, shadow, omni );

			// cheaper faux rain sheen for non-road surfaces
//			light.spc		*= ( 1 + gGlobalWetness * 2 );

			tDiffuse.rgb	= tDiffuse.rgb * light.sun + light.spc;	// MAD
			tDiffuse.rgb	*= i.extinction.rgb;
			tDiffuse.rgb	+= NIGHT_DARKEN2 ( i.inscatter.rgb, night );

// DEBUG
// see how far apart things are in the shadow bands,
// so we can determine what sfx to kill at what distance
/*
//if ( slice == 0 )
	// do nothing
if ( slice == 1 )
	tDiffuse.r *= 10;

if ( slice == 2 )
	tDiffuse.g *= 10;

if ( slice == 3 )
	tDiffuse.b *= 10;
*/




//	#if !defined(bNoSlice1)			// Slice 1
//		tDiffuse.r *= 10;
//	#endif
//	#if !defined(bNoSlice2)			// Slice 2
//		tDiffuse.r *= 10;
//	#endif
//	#if !defined(bNoSlice3)			// Slice 3
//		tDiffuse.r *= 10;
//	#endif


	// everthing's red
//	#if !defined(bNoSlice1)			// Slice 1
//		tDiffuse.r *= 10;
//	#else
//		tDiffuse.g *= 10;
//	#endif

	// this doesn't seem to work.. everything is red
//	#if !defined(bNoSlice2)			// Slice 2
//		tDiffuse.r *= 10;
//	#else
//		tDiffuse.g *= 10;
//	#endif
/*
	// this works, so bNoSlice3 is defined
	#if defined(bNoSlice3)			// Slice 3
		tDiffuse.r *= 10;	// slice 0, 1 turn red
	#else
		tDiffuse.g *= 10;	// slice 2,3 turn green
	#endif
*/


	return	tDiffuse;
}

//--------------------------------------------------

	void ph_gbuffer( VS_GroundGBuffer_Output i, out PS_GBuffer o)
	{
		float2	uv	= i.variables.zw;

	#ifdef	bCompression
		float3	normal0 		= tex2D(sBumpMap0,uv.xy).xyw;
		float3	normal1 		= tex2D(sBumpMap1,uv.xy).xyw;
		float3	normal2 		= tex2D(sBumpMap2,uv.xy).xyw;
	#else
		float3	normal0 		= tex2D(sBumpMap0,uv.xy).xyz;
		float3	normal1 		= tex2D(sBumpMap1,uv.xy).xyz;
		float3	normal2 		= tex2D(sBumpMap2,uv.xy).xyz;
	#endif

		float3	normal 			= lerp(normal0, normal1, i.variables.x);
				normal 			= lerp(normal,  normal2, i.variables.y);
				normal 			= normal * 2 - 1;
//				normal 			= normalize(normal);

		// Store normal in view space
				normal 			= mul( normal, i.iTBNmatrix );
				normal 			= mul( normal, gViewRotMatrix );
				normal 			= normalize( normal );
				o.Normal.xyz	= normal.xyz * 0.5 + 0.5;
				o.Normal.w		= 1;


				// new
//				o.Depth			= i.position2;	// math done in vertex shader

				// old .. keep like this, or can borked stuff up
				o.Depth.x 		= i.position2.z / i.position2.w;
				o.Depth.yz 		= 0;
				o.Depth.w 		= 1;
	}

#endif