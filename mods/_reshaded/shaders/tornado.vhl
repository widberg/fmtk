#ifndef	__TORNADO_VHL__
#define	__TORNADO_VHL__

#include "__setup.h"
#include "_vertex_const.h"
#include "_vertex_scatter.h"
#include "tornado.h"

//--------------------------------------

struct VS_TornadoSmoke
{
	float3	position					: POSITION;
	float3	normal						: TEXCOORD0;
	float4	uvbrightnessalpha			: TEXCOORD1;
	float3	axis						: TEXCOORD2;
	float4	rotationDiameterAngleScale	: TEXCOORD3;
};

struct VS_Tornado_Input
{
	float3	position	: POSITION;
	float3	normal		: TEXCOORD0;
	float4	UVAlphaAdd	: TEXCOORD1;
	float3	tangent		: TEXCOORD2;
	float3	binormal	: TEXCOORD3;
};

//--------------------------------------

float3x3 FromAxisAngle ( float3 Axis, float angle )
{
	float3	SinCosTan;		// .x = sin // .y = cos // .z = tan
			SinCosTan.xy	= Sincos ( angle );
//			SinCosTan.z		= 1 - SinCosTan.y;
			SinCosTan.z		= SinCosTan.x / SinCosTan.y;	// testing ... tangent in hlsl = sin / cos

	float3	AxisS		= Axis.xyz * SinCosTan.x;
	float3	AxisT		= Axis.xxy * Axis.yzz * SinCosTan.z;
	float3	AxisC		= SinCosTan.y + ( Axis.xyz * Axis.xyz * SinCosTan.z );

	float3	tmpNeg		= AxisT.xyz - AxisS.zyx;
	float3	tmpPos		= AxisT.xyz + AxisS.zyx;

	float3x3
			mat;
//			mat[0].xyz	= float3 ( AxisC.x, tmpNeg.x, tmpPos.y );
//			mat[1].xyz	= float3 ( tmpPos.x, AxisC.y, tmpNeg.z );
//			mat[2].xyz	= float3 ( tmpNeg.y, tmpPos.z, AxisC.z );

/*
			mat[0].x	= AxisC.x;
			mat[0].y	= tmpNeg.x;
			mat[0].z	= tmpPos.y;

			mat[1].x	= tmpPos.x;
			mat[1].y	= AxisC.y;
			mat[1].z	= tmpNeg.z;

			mat[2].x	= tmpNeg.y;
			mat[2].y	= tmpPos.z;
			mat[2].z	= AxisC.z;
*/
/*
			3x3 matrix breaks down as follows...

			mat._11_12_13
			mat._21_22_23
			mat._31_32_33

			.. so we can just set the things directly by swizzling matrix.
*/

			mat._11_22_33	= AxisC.xyz;
			mat._12_23_31	= tmpNeg.xzy;
			mat._13_21_32	= tmpPos.yxz;

	return	mat;
}

//-----------------------------------------------
// doesn't do anything .. neutering code
//-----------------------------------------------

// dummy struct to disable stuff with
struct	VS_Blank	{float4	position : POSITION;};

void vh_tornadosmoke ( out VS_Blank o )	{o.position	= 0.0;}


//------------------------------------------------
// billowy dust that follows base of funnel
//------------------------------------------------

void vh_tornadobasesmoke(VS_TornadoSmoke i, out VS_TornadoSoftSmokeOut o)
{
	float	angle			= i.rotationDiameterAngleScale.z;
	float3x3 rotMat			= FromAxisAngle(i.axis, angle);
	float3	normal			= mul(rotMat, i.normal.xyz);
			normal			= normalize(normal);

	float4	position;
			position.xyz	= i.position.xyz;
			position.w		= C_UNIT;

	float4	worldCenter		= position;
			worldCenter		= WorldVertex(worldCenter);

			position.xyz 	+= normal * i.rotationDiameterAngleScale.y;

	float4	wPos			= WorldVertex(position);
	float4	vPos			= WorldToViewVertex(wPos);

	float3	v0				= wPos - EYE_WORLD;
	float3	v1				= worldCenter - wPos;
			v0				= normalize(v0);
			v1				= normalize(v1);

	float	edgeCoeff		= dot(v0, v1);
			edgeCoeff		= saturate( edgeCoeff );
			edgeCoeff		= pow(edgeCoeff, 0.5);

	float	kscale			= edgeCoeff;

	float2	partScale		= (i.uvbrightnessalpha.xy * C_TWO - C_UNIT) * i.rotationDiameterAngleScale.w;
	float2	_sincos			= Sincos(i.rotationDiameterAngleScale.x);
			partScale 		= GetScaleRotation( partScale.xy, _sincos.xy );
			partScale		*= kscale;
			vPos.xy			+= partScale.xy;


			o.position		= ProjVertex(vPos);
			o.diffuse		= i.uvbrightnessalpha.zzzw;	// o.diffuse.xyz not used in pixel shader
			o.diffuse.a		*= kscale;
			o.uv			= i.uvbrightnessalpha.xy;

	// asobo already had vertex lighting coded up here, but was using
	// pixel lighting for this instead. The pixel lighting was very basic, however,
	// so tested out vertex lighting here and it looks the same, but less processing.
	// so, using vertex lighting here. By doing so, we can move several pixel calc's over..
	// like sundot, sun + sky color addition, and sun * extinction * 0.6 for final sun value

	float3 skylight, extinction;
	scattering(wPos, extinction, o.inscatter, o.sunlight.xyz, skylight.xyz);

	// add in our base lighting amount to the sky lighting amount
//			skylight.xyz	+= AMBIENT_OCCLUSION_COLOR;

	// normal's already normalized from above
	float	sundot			= dot( normal.xyz, DLIGHT_DIR.xyz );
			sundot			= saturate ( sundot );
			o.sunlight.xyz	= o.sunlight.xyz * sundot
							+ skylight.xyz
							+ AMBIENT_OCCLUSION_COLOR;
			o.sunlight.xyz	*= extinction * 0.6;	// moved here from pixel shader

			o.uvscreen		= o.position;
}


void vh_tornadoclouds(VS_Tornado_Input i, out VS_Tornado_Cloud_Output o)
{
	float4	wPos;
			o.position.xyz	= i.position.xyz;
			o.position.w	= C_UNIT;
			o.position		= WorldAndProjectVertex(o.position, wPos);
			o.uv.xy 		= i.UVAlphaAdd.xy;

	float3	vec				= C_USER7.xyz - wPos.xyz;
	float	len				= length(vec);

			o.eyevec.xyz	= vec / len;
			o.eyevec.w		= C_UNIT - saturate(len / 500);

	scatteringbase(wPos, o.extinction.xyz, o.inscatter.xyz);
}


//------------------------------------------------
// tornado funnel
//------------------------------------------------

void vh_tornado(VS_Tornado_Input i, out VS_Tornado_Funnel_Output o)
{
	float4	wPos;
			o.position.xyz	= i.position.xyz;
			o.position.w	= C_UNIT;
			o.position		= WorldAndProjectVertex(o.position, wPos);

//	o.uvAlpha.xy = i.UVAlphaAdd.xy + C_USER0.yz;
//	o.uvAlpha.zw = i.UVAlphaAdd.zz;

			o.uv.xy			= i.UVAlphaAdd.xy + C_USER0.yz;
			o.uv.zw			= o.uv.xy * 4;
			o.uv.z			= -o.uv.z + 0.21;
			o.alpha.x		= i.UVAlphaAdd.z;

	float3	vec				= C_USER7.xyz - wPos.xyz;
	float	len				= length(vec);

			o.eyevec.xyz	= vec / len;
			o.eyevec.w		= C_UNIT - saturate(len / 500);
			o.eyevec.w		= 0.2 + o.eyevec.w * 0.3;	// moved here from pixel shader

	float3	vNormalWS		=  normalize(i.normal).xyz;
	float3	vTangentWS		= -normalize(i.tangent).xyz;
	float3	vBinormalWS		=  normalize(i.binormal).xyz;

			o.TBNmatrix		= float3x3(vTangentWS, vBinormalWS, vNormalWS);

	scatteringbase(wPos, o.extinction.xyz, o.inscatter.xyz);
}

#endif