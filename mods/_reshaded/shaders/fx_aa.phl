/*
	inlined to fx.phl
*/

//----------------------------------------------
// anti-aliasing
//----------------------------------------------
/*
	FUEL's fx.phl shader had some AA routines, but they didn't seem
	to be implemented. You could pick whatever AA setting you wanted
	in game setup, and it didn't make a difference. I tried plug-n-playing
	them directly into the final tone_mapping routine, but the
	gSampleOffsetWeight values were causing the scene to be skewed too much.
	I'm guessing the game engine pipes different values to gSampleOffsetWeight
	depending on what it's being used for (motion blur, aa, etc), so,
	just pluggin the AA routines into the tone_mapping had them using the
	gSampleOffsetWeight values for something else (blur perhaps?)
	Anyways, got tired of dicking around with that to no end. So, I just
	created my own hack/cheap AA. I then dug around online and found
	some github code that uses calculations to determine AA instead of
	just hackishly expanding screen size and avg'ing the results.
	Between the two, it should provide enough AA options for most folks.
*/

// trilinear equation


	// this takes the pixel and gets the surrounding pixels around it,
	// a 3x3 area, and interpolates the 3x3 samples with each other & center sample
	// it's a more high-tech way of doing things instead of just avg'ing samples together

	// found this code at https://github.com/libretro/common-shaders/blob/master/anti-aliasing/advanced-aa.cg
	// contributors to the code are twinaphex, Hyllian & Monroe88
	// I'm using the last part of it that showed how to interpolate the samples using trilinear equation

	// these are constant values that never change,
	// so calculate first time and keep the same via "static"
	static	float	x	= 0.00090;
	static	float	y	= 0.00090;

	// offsets
	static	float2	NN	= float2(-x,-y);						// 0	neg neg
	static	float2	PN	= float2( x,-y);						// 2	pos neg
	static	float2	NP	= -PN;									// 6	neg pos (reverse of pos neg)
	static	float2	PP	= -NN;									// 8	pos pos (reverse of neg neg)
	static	float2	ON	= float2( 0,-y);						// 1	 0  neg
	static	float2	NO	= float2(-x, 0);						// 3	neg  0 
	static	float2	OP	= -ON;									// 5	 0  pos (reverse of  0  neg)
	static	float2	PO	= -OP;									// 7	pos  0  (reverse of neg  0 )

	//--------------------------------------------
	// 3x3 area (center pixel + surrounding 8)
	//--------------------------------------------
	//	c00	c01	c02
	//	c10	c11	c12
	//	c20	c21	c22
	//--------------------------------------------

	// texture calls are expensive,
	// so doing 9 texture calls per-pixel to AA
	// is why AA can be so expensive

	float3	c11		= tex2D ( s0, vScreenPosition      ).rgb;	// 4	main / center sample
	float3	c00 	= tex2D ( s0, vScreenPosition + NN ).rgb;	// 0
	float3	c20 	= tex2D ( s0, vScreenPosition + PN ).rgb;	// 2
	float3	c02 	= tex2D ( s0, vScreenPosition + NP ).rgb;	// 6
	float3	c22 	= tex2D ( s0, vScreenPosition + PP ).rgb;	// 8
	float3	c10 	= tex2D ( s0, vScreenPosition + ON ).rgb;	// 1
	float3	c01 	= tex2D ( s0, vScreenPosition + NO ).rgb;	// 3
	float3	c21 	= tex2D ( s0, vScreenPosition + OP ).rgb;	// 5
	float3	c12 	= tex2D ( s0, vScreenPosition + PO ).rgb;	// 7

	// trilinear equation
	float	d1		= dot ( abs ( c00 - c22 ), 1 ) + 0.0001;	// diagonal ... upper-left to lower-right
	float	d2		= dot ( abs ( c20 - c02 ), 1 ) + 0.0001;	// diagonal ... upper-right to lower-left
	float	hl		= dot ( abs ( c01 - c21 ), 1 ) + 0.0001;	// horizontal
	float	vl		= dot ( abs ( c10 - c12 ), 1 ) + 0.0001;	// vertical

	float	hlvl	= hl + vl;	// horizontal + vertical
	float	d1d2	= d1 + d2;	// diagonal + diagonal

//		float	k1		= 0.5 * ( hl + vl );
//		float	k2		= 0.5 * ( d1 + d2 );

	float	k1		= 0.5 * ( hlvl );
	float	k2		= 0.5 * ( d1d2 );


//		float3	t1		= ( hl * ( c10 + c12 ) + vl * ( c01 + c21 ) + k1 * c11 ) / ( 2.5 * ( hl + vl ) );
//		float3	t2		= ( d1 * ( c20 + c02 ) + d2 * ( c00 + c22 ) + k2 * c11 ) / ( 2.5 * ( d1 + d2 ) );

	float3	t1		= ( hl * ( c10 + c12 ) + vl * ( c01 + c21 ) + k1 * c11 ) / ( 2.5 * ( hlvl ) );
	float3	t2		= ( d1 * ( c20 + c02 ) + d2 * ( c00 + c22 ) + k2 * c11 ) / ( 2.5 * ( d1d2 ) );

			k1		= dot ( abs ( t1 - c11 ), 1 ) + 0.0001;
			k2		= dot ( abs ( t2 - c11 ), 1 ) + 0.0001;

		vSample.rgb	= ( k1 * t2 + k2 * t1 ) / ( k1 + k2 );
