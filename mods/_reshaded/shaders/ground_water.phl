#ifndef	__GROUND_WATER_PHL__
#define	__GROUND_WATER_PHL__

#include "hlsl_math.h"
#include "hlsl_shadow.h"
#include "scattering_light.h"
#include "ground_water.h"
#include "_pixel.h"
#include "__setup.h"

//-----------------------------------------

//float3	gDOmniColor;

//-----------------------------------------


	struct PixelWater {
		float4		Settings0;//	: register(c10);
		float4		Settings1;//	: register(c11);
		float4		Settings2;//	: register(c12);
		float4		Settings3;//	: register(c13);
	};

	const PixelWater	gWater;

//-----------------------------------------
/*
	float Fresnel( float3 eyevec, float3 normal )
	{
		//How to compute R0:
		//R0 = pow( 1 - refractionIndexRatio, 2.0f ) /
		//     pow( 1 + refractionIndexRatio, 2.0f );
		float	R0			= gWater.Settings1.w;
		float	cosangle	= 1.0 - saturate( dot( eyevec, normal ) );
		float	fresnel		= pow( cosangle, 5.0 );
				fresnel		= saturate( fresnel * (1.0 - saturate(R0)) + R0 );
				fresnel		*= gWater.Settings2.y;
		return	fresnel;
	}
*/

	float	Fresnel ( float3 eyevec, float3 normal )
	{
		// (asobo)
		// How to compute R0:
		// R0 = pow( 1 - refractionIndexRatio, 2.0f ) /
		//      pow( 1 + refractionIndexRatio, 2.0f );
		//
		// (me)
		// refractionIndexRatio is unique to a material based on how much it slows light
		// and refracts / compresses the wavelength. EG: air = 1, water = 1.333, etc.
		// since we know water = 1.333, we can calc R0 on our own to see if the R0
		// pipe in from the game engine is valid or not...
		// R0 = pow( 1 - 1.33, 2.0f ) /
		//      pow( 1 + 1.33, 2.0f );
		// R0 = pow( 0.33, 2.0f ) /
		//      pow( 2.33, 2.0f );
		// R0 = 0.020059312;

//		float	R0				= gWater.Settings1.w;
		float	R0				= 0.020059312;
		float	cosangle		= 1.0 - saturate( dot( eyevec, normal ) );
		float	fresnel			= pow( cosangle, 5.0 );
				fresnel			= R0 + ( 1.0 - R0 ) * fresnel;	// water does refractive R0 variation
				fresnel			*= gWater.Settings2.y;
				fresnel			= saturate ( fresnel );
		return	fresnel;
	}



	// alters the sample position, so it can be used
	// in calculations for Z-Depth
	float4	GetZSamplePos ( float4 SamplePos )
	{
		float4	sPos;
				sPos.xyz	= SamplePos.xyz / SamplePos.w;
				sPos.xy		= sPos.xy * 0.5 + 0.5;	// Remap from [-1,1] to [0,1]
				sPos.y		= 1.0 - sPos.y;			// Invert Y
				sPos.w		= 1.0;	// .w needs to be 1, or things bork up (ie: don't send SamplePos.w through)
		return	sPos;
	}


	// takes in position values to generate
	// z value (usually stored Z buffer value or current Z value)
	float	GetZValue ( float4 SamplePos )
	{
//		float4	sPos	= mul ( SamplePos, gInvProjMatrix );	// view position
//		return	sPos.z / sPos.w;

		float2	sPos	= mul ( SamplePos, gInvProjMatrix ).zw;	// view position
		return	sPos.x / sPos.y;	// .z / .w
	}


	float ComputeWaterDepth ( float4 samplePos, out float2 screenUV, out float waterDist )
	{
		float4	sPos			= GetZSamplePos ( samplePos );
				screenUV		= sPos.xy;
				sPos.xy			= sPos.xy * gViewportScaleOffset2.zw + gViewportScaleOffset2.xy;	// MAD
		float	ZPosition		= GetZValue ( sPos );
				sPos.z			= texDepth2D( sZBuffer, sPos.xy );
		float	ZinBuffer		= GetZValue ( sPos );
				waterDist		= ZPosition;
		return	max ( ZinBuffer - ZPosition, 0.0 ) * gWater.Settings1.z;
	}


	float3 GetWaterNormal ( float4 uv, float bias )
	{
	#ifdef	bCompression
		float3	normal0		= tex2DB( sNormalLocal, uv.xy, bias).xyw * 2 - 1;
		float3	normal1		= tex2DB( sNormalLocal, uv.zw, bias).xyw * 2 - 1;
		float3	normal		= normal0 + normal1;
	#else
		float3	normal0		= tex2DB( sNormalLocal, uv.xy, bias).xyz;
		float3	normal1		= tex2DB( sNormalLocal, uv.zw, bias).xyz;
		float3	normal		= normal0 + normal1;
				normal		= normal * 2 - 1;
	#endif

		return	normal;
	}

	float3 GetWaterSpecularNormal ( float3 normal, float yMultiplier )
	{
		float3	specularNormal		= normal;
				specularNormal.y	*= gWater.Settings3.x * yMultiplier;
				specularNormal		= normalize(specularNormal);
		return	specularNormal;
	}

	// water uses VERTEX_SHADOW_SLICES, so have to differentiate branch here
	float GetWaterShadow ( VS_GroundWaterOutput_Z i, out int slice )
	{
				slice	= 0;	// have to set it here, or compiler blows up even though it's already created/set
		float	shadow	= 1;

			#ifdef VERTEX_SHADOW_SLICES
				shadow	= SHADOW_VTX_TRI(slice);
			#else
				shadow	= SHADOW_PXL_TRI(slice);
			#endif

		return	shadow;
	}


	// (asobo) The omni which serves as an ambient occlusion of cars on the ground.
	float GetWaterOcclusion ( VS_GroundWaterOutput_Z i, float shadow, float bias )
	{
		float	occlusion	= 1;

		#ifdef	bOmni
		float3	omniuv;
				omniuv.x	= i.eyevec.w;
				omniuv.y	= i.inscatter.w;
				omniuv.z	= i.extinction.w;
				occlusion	*= GetOmniOcclusion( omniuv, bias );
				occlusion	= SaturateOcclusion ( occlusion, shadow );	// AO only occurs in shadows
		#endif

		return	occlusion;
	}


	// normal & light directions
	float3 GetWaterLightdots ( float3 normal, float3 specularNormal, float3 eyevec, float occlusion )
	{
		float3	sunvec		= gDLight.Dir.xyz;
		float3	spcref		= reflect( -eyevec, specularNormal );
		float	spcpow		= gWater.Settings3.y * 2;
		float3	dots		= lightdots(normal, sunvec, spcref, spcpow, occlusion);
		return	dots;
	}


	// finalize light colors
	lights GetWaterLight ( float3 dots, float omni, float shadow, float3 eyevec, float3 normal )
	{
		lights	light		= SetLightColors( shadow );
				light.spc	= light.sun;	// replace specular light with sun in all cases, even in shadows (looks nicer)
		float	spccol		= gWater.Settings3.z * 0.3;
				dots.z		*= spccol;// spccol is float, so mul here instead of light.spc
//				dots.z		*= max(shadow, 0.75);	// lighten specular in shadow more

				// soften shadow more for water to simulate
				// light diffusing in it and bouncing off particles
		float	shd			= max(shadow, 0.2);
				light.sky	= ShadowHighlight( light.sky, dots, eyevec, normal );
				light		= lightcols( dots, light, shd, omni );
		return	light;
	}

	// refraction of things in water (eg: wheels on vehicles refract when in water)
	float3 GetWaterRefraction ( float3 normal, float2 screenUV, float waterDepth, float waterDist, float bias )
	{
								// float2    * ( float * float * float / float ) = 5 mul's ( 3 inner & 2 outer )
				screenUV		+= normal.xz * ( waterDepth * gWater.Settings1.x * 0.2 / waterDist );

		// refraction isn't noticeable unless you're right on top of water looking
		// down into it (IE: in shadow band/slice 0), so we can increase the bias
		// to blur things in band 1+ even more to reduce processing of it more
//		float3	refraction		= tex2DB( sRenderTarget, screenUV, bias * 2).rgb;

		// force downsampling, b/c refraction in this situation is the ground texture
		// under the water shimmering and refracting. Since you only see it when right
		// on top of water, we can downsample it when out further and hidden
		float3	refraction		= tex2Dbias( sRenderTarget, float4( screenUV, 0, bias * 2 ) ).rgb;
		return	refraction;
	}


	// environmental reflection on water surface (eg: hills reflecting on surface)
	// reflection on water is treated like chrome on vehicles,
	// so it already has its own light mixed in, it's applied to the diffuse color,
	// and we soften it more with another shadow * 0.X + 0.Y, b/c reflective surface
	// reflects more light in shadow and thus looks brighter in shadows
	float3 GetWaterReflection ( float3 normal, float3 eyevec, float bias )
	{
		float3	spcref	= reflect( -eyevec, normal );
		return	GetCubeMap( spcref, bias );
	}


	// ocean / lake shore foam
	// foamSize 	... smaller values = bigger foam size
	// foamAlpha 	... how transparent foam will be on water surface
	float	GetWaterShoreFoam ( float2 uv, float waterDepth, float foamSize, float foamAlpha, float bias )
	{
		float	softening	= saturate ( 1.0 - waterDepth );	// how far foam band stretches from shore into water
				softening	*= foamAlpha;					// foam transparency
				uv			*= foamSize;

		// shore foam is smudgy to begin with, so blurring it more in the distance
		// will help us save a bit of processing while hardly being noticeable
				softening	*= tex2DB ( sDiffuse, uv, bias ).w;
		// force bias on shore foam, since smudgy anyways at a distance
		// it'll still use the DOWNSAMPLE_AMOUNT set in _setup.h
// don't force it.. looks awful from up on top of a mountain as it shimmers too much
//				softening	*= tex2Dbias( sDiffuse, float4( uv, 0, bias ) ).w;
		return	softening;
	}

//----------------------------------------------------------------
    float4 ph_water( VS_GroundWaterOutput_Z i )	{
//----------------------------------------------------------------

		bool	night			= IS_NIGHT;	// 0 = no // 1 = yes
		float	omni			= 0;
		int		slice			= 0;
		float	shadow			= GetWaterShadow( i, slice );
		float	bias			= SET_BIAS( slice );	// do this after shadow, b/c shadow sets slice
		float	occlusion		= GetWaterOcclusion( i, shadow, bias );
		float3	eyevec			= normalize(i.eyevec.xyz);	// keep this i.eyevec.xyz or spec on water borks up


		// Get water depth from ZBuffer
		float2	screenUV;
		float	waterDist;
		float	waterDepth		= ComputeWaterDepth( i.zBuffUV, screenUV, waterDist );
		
		float4	color;
				color.rgb		= i.diffuse.rgb * gWater.Settings0.x;
				color.a			= 1;

		// specular uses an adjusted normal to make sparklies extra wide
		float3	normal			= GetWaterNormal( i.uv, bias );
		float3	specularNormal	= GetWaterSpecularNormal ( normal, 3 );
				normal.y		*= gWater.Settings0.w * 0.2;
				normal			= normalize(normal);

		// environmental reflection & water refraction (for things in water)
		float3	reflection		= GetWaterReflection( normal, eyevec, bias );

// skip doing this in shadow slice 3 distant areas
float3	refraction	= 0;

//bool slicestep3 = step( slice, 2 );	// 2 >= slice .. so process on slice 0 & 1 & 2
//bool slicestep2 = step( slice, 1 );	// 1 >= slice .. so process on slice 0 & 1

//if ( slice < 3 )
//if ( slicestep3 )
//{
				refraction		= GetWaterRefraction( normal, screenUV, waterDepth, waterDist, bias );

		// faux headlights ... refraction from underlying ground already has headlights mixed in
		// so we dot it to get a faux luminance value to use for faux headlights on water
				omni			= dot ( refraction, night );
//}
		// color mix during storms and at night
//		float3	colorRain		= color.rgb * float3 ( 1.85, 2.15, 1.85 );	// rain color (lighter & greenish simulates algal bloom & foam aeration)
		float3	colorRain		= color.rgb * float3 ( 2, 5, 3 );	// rain color (lighter & greenish simulates algal bloom & foam aeration)
		float3	colorNight		= NIGHT_LIGHTEN2(color.rgb, night) * float3 ( 0.9, 1.1, 0.9 );
				color.rgb		= lerp ( color.rgb, colorRain, gGlobalWetness );	// this needs to transition with lerp
//				color.rgb		= lerp( color.rgb, colorNight, night );			// this just needs to boolean branch
				color.rgb		= Select( color.rgb, colorNight, night );			// this just needs to boolean branch
//				color.rgb		= night ? colorNight : color.rgb;			// this just needs to boolean branch


		// lighting
		float3	dots			= GetWaterLightdots( normal, specularNormal, eyevec, occlusion );
		lights	light			= GetWaterLight( dots, omni, shadow, eyevec, normal );
				color.rgb		*= light.sun;

// skip doing this in shadow slice 2 or 3 distant areas
//if ( slice < 2 )
//if ( slicestep2 )
//{
		// depth fog penetrating to refraction of ground & objects below water
//		float	fogAmount		= saturate( 1 - exp( -waterDepth * 0.1 * gWater.Settings2.z * i.diffuse.a ) );
		float	fogAmount		= saturate( 1 - exp( -waterDepth * gWater.Settings2.z * i.diffuse.a ) );
				color.rgb		= lerp( refraction.rgb, color.rgb, fogAmount);
//}

		// going forward, all uses of waterDepth have it mul'ing with gWater.Settings2.x
		// so just do it once here and get on with life
				waterDepth		*= gWater.Settings2.x;

		float	borderSoftening = saturate( waterDepth * 0.02 );

		// environmental reflection on surface
		// shadow impacts fresnel, not reflection
		float	softshadow		= max( shadow, 0.35 ) * max( occlusion, 0.25 );
		float	fresnel			= Fresnel( eyevec, normal ) * softshadow;
				fresnel			*= borderSoftening; 	// kill reflection as it nears water edge
				color.rgb		= lerp( color.rgb, reflection, fresnel );



		// specular sparklies on wave crests
				color.rgb		+= light.spc * borderSoftening;	// kill specular as it nears water edge



//bool slicestep3 = step( slice, 2 );	// 2 >= slice .. so process on slice 0 & 1 & 2
//bool slicestep2 = step( slice, 1 );	// 1 >= slice .. so process on slice 0 & 1

// skip doing this in shadow slice 3 distant areas
// this needs to be seen from far away
//if ( slice < 3 )
//if ( slicestep3 )
//{
		// Ecume (shore foam)
		// foam glistens b/c it's bubbly and reflects / refracts light
		// so, we make shadows dim down foam, too, b/c it's cutting the
		// direct light, but a bit of ambient light will still diffuse
		// into the shadow to let the foam dully shimmer
		float2	ecumeuv			= i.uv.xy;
				ecumeuv			-= normal.xz * 0.5;
		float	foamAlphaSmall	= softshadow;			// shadow has lesser impact then it does on sunlight
		float	foamAlphaLarge	= foamAlphaSmall * 0.5;	// larger foam is even more transparent to simulate breaking up / dispersing 



		float	foamAmount		= GetWaterShoreFoam ( ecumeuv, waterDepth * 0.0020, 0.3, foamAlphaLarge, bias )	// large, hazy foam band out in water
								+ GetWaterShoreFoam ( ecumeuv, waterDepth * 0.0050, 0.8, foamAlphaSmall, bias );	// small, distinct foam band near shore


		// add foam
				color.rgb		=lerp(color.rgb, light.sun, foamAmount);
//}

		// Scattering
				color.rgb		*= i.extinction.xyz;
				color.rgb		+= NIGHT_DARKEN2 ( i.inscatter.xyz, night);

// skip doing this in shadow slice 2 or 3 distant areas
//if ( slice < 2 )
//if ( slicestep2 )
//{
		// Border softening && sea shore
//		float	borderSoftening = saturate( waterDepth * 0.02 );
				color.rgb		= lerp( refraction.rgb, color.rgb, borderSoftening ); //Make water transparent at low water depth
//}

// DEBUG
// see how far apart things are in the shadow bands,
// so we can determine what sfx to kill at what distance
/*
//if ( slice == 0 )
// do nothing
if ( slice == 1 )
	color.r *= 10;

if ( slice == 2 )
	color.g *= 10;

if ( slice == 3 )
	color.b *= 10;
*/



/*
	// everything's green ... so flag not set
	#if defined(bNoSlice1)
		color.r *= 10;
	#else
		color.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice2)
		color.r *= 10;
	#else
		color.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice3)
		color.r *= 10;	// slice 0, 1 turn red
	#else
		color.g *= 10;	// slice 2, 3 turn green
	#endif
*/



		return	color;
	}


//----------------------------------------------------------------
    float4 ph_water_river( VS_GroundWaterOutput_Z i) : COLOR0    {
//----------------------------------------------------------------

		bool	night			= IS_NIGHT;	// 0 = no // 1 = yes
		float	omni			= 0;
		int		slice			= 0;
		float	shadow			= GetWaterShadow( i, slice );
		float	bias			= SET_BIAS( slice );	// do this after shadow, b/c shadow sets slice
		float	occlusion		= GetWaterOcclusion( i, shadow, bias );
		float3	eyevec			= normalize(i.eyevec.xyz);

		
		// Get water depth from ZBuffer
		float2	screenUV;
		float	waterDist;
		float	waterDepth		= ComputeWaterDepth( i.zBuffUV, screenUV, waterDist );

		float4	color;
				color.rgb		= i.diffuse.rgb * gWater.Settings0.x;
				color.a			= 1;

		// specular uses an adjusted normal to make sparklies extra wide
		float3	normal			= GetWaterNormal( i.uv, bias );
		float3	specularNormal	= GetWaterSpecularNormal ( normal, 3 );
				normal.y		*= gWater.Settings0.w;
				normal			= normalize(normal);

		// environmental reflection & water refraction (for things in water)
		float3	reflection		= GetWaterReflection( normal, eyevec, bias );


// skip doing this in shadow slice 3 distant areas
float3	refraction	= 0;

//bool slicestep2 = step( slice, 1 );	// 1 >= slice .. so process on slice 0 & 1

//if ( slice < 2 )
//if ( slicestep2 )
//{
				refraction		= GetWaterRefraction( normal, screenUV, waterDepth, waterDist, bias );


		// faux headlights ... refraction from underlying ground already has headlights mixed in
		// so we dot it to get a faux luminance value to use for faux headlights on water
				omni			= dot ( refraction, night );
//}

		// mix color based on rain and night
				color.rgb		*= ( 1.0 + gGlobalWetness );	// lighten water in rain to simulate mud/silt stirred up
//		float3	colorNight 		= NIGHT_DARKEN(color.rgb) * float3 ( 0.9, 1.1, 0.9 );
		float3	colorNight 		= NIGHT_LIGHTEN2(color.rgb, night) * 0.5;//float3 ( 0.9, 1.1, 0.9 );
//				color.rgb		= lerp( color.rgb, colorNight, night );			// this just needs to boolean branch
				color.rgb		= Select( color.rgb, colorNight, night );			// this just needs to boolean branch
//				color.rgb		= night ? colorNight : color.rgb;			// this just needs to boolean branch


		// lighting
		float3	dots			= GetWaterLightdots( normal, specularNormal, eyevec, occlusion );
		lights	light			= GetWaterLight( dots, omni, shadow, eyevec, normal );
				color.rgb		*= light.sun;


//if ( slice < 2 )
//if ( slicestep2 )
//{
		// depth fog penetrating to refraction of ground & objects below water
//		float	fogAmount		= saturate( 1 - exp( -waterDepth * 0.1 * gWater.Settings2.z * i.diffuse.a ) );
		float	fogAmount		= saturate( 1 - exp( -waterDepth * gWater.Settings2.z * i.diffuse.a ) );
				color.rgb 		= lerp( refraction.rgb, color.rgb, fogAmount );
//}

		float	borderSoftening	= saturate( waterDepth * 0.01 * gWater.Settings2.x );
				borderSoftening	-= waterDist * 0.002f;	
				borderSoftening	= saturate(borderSoftening);

		// environmental reflection on surface
		float	softshadow		= max( shadow, 0.35 ) * max( occlusion, 0.25 );
		float	fresnel			= Fresnel( eyevec, normal ) * softshadow;
				fresnel			*= borderSoftening;	// kill reflection as it nears water edge
				color.rgb		= lerp( color.rgb, reflection.rgb, fresnel );//* (shadow * 0.5 + 0.5 ) * occlusion );





		// specular sparklies on wave tops
				color.rgb		+= light.spc * borderSoftening; // kill specular as it nears water edge

		// Scattering
				color.rgb		*= i.extinction.xyz;
				color.rgb		+= NIGHT_DARKEN2 ( i.inscatter.xyz, night);

		// Border softening && sea shore
		// Fade out a la distance
//if ( slice < 2 )
//if ( slicestep2 )
//{
/*
		float	borderSoftening	= saturate( waterDepth * 0.01 * gWater.Settings2.x );
				borderSoftening	-= waterDist * 0.002f;	
				borderSoftening	= saturate(borderSoftening);
*/

				color.rgb = lerp( refraction.rgb, color.rgb, borderSoftening ); //Make water transparent at low water depth
//}


/*
	// everything's green ... so flag not set
	#if defined(bNoSlice1)
		color.r *= 10;
	#else
		color.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice2)
		color.r *= 10;
	#else
		color.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice3)
		color.r *= 10;	// slice 0, 1 turn red
	#else
		color.g *= 10;	// slice 2, 3 turn green
	#endif
*/



		return	color;
    }

    
//----------------------------------------------------------------
    float4 ph_water_puddle( VS_GroundWaterOutput_Z i) : COLOR0    {
//----------------------------------------------------------------

		bool	night			= IS_NIGHT;	// 0 = no // 1 = yes
		float	omni			= 0;
		int		slice			= 0;
		float	shadow			= GetWaterShadow( i, slice );
		float	bias			= SET_BIAS( slice );	// do this after shadow, b/c shadow sets slice
		float	occlusion		= GetWaterOcclusion( i, shadow, bias );
		float3	eyevec			= normalize(i.eyevec.xyz);

		
		// Get water depth from ZBuffer
		float2	screenUV;
		float	waterDist;
		float	waterDepth		= ComputeWaterDepth( i.zBuffUV, screenUV, waterDist );
			
		float4	color;
				color.rgb		= i.diffuse.rgb * gWater.Settings0.x;
				color.a			= 1;

		// specular uses an adjusted normal to make sparklies extra wide
		float3	normal			= GetWaterNormal( i.uv, bias );
		float3	specularNormal	= GetWaterSpecularNormal ( normal, 5 );
				normal.y		*= gWater.Settings0.w;
				normal			= normalize(normal);

		// environmental reflection & water refraction (for things in water)
		float3	reflection		= GetWaterReflection( normal, eyevec, bias );

float3	refraction	 = 0;

//bool slicestep = step( slice, 1 );	// 1 >= slice .. so process on slice 0 & 1

//if ( slice < 2 )
//if ( slicestep )
//{

				refraction		= GetWaterRefraction( normal, screenUV, waterDepth, waterDist, bias );

		// faux headlights ... refraction from underlying ground already has headlights mixed in
		// so we dot it to get a faux luminance value to use for faux headlights on water
				omni			= dot ( refraction, night );
//}

		// alt color at night to look decent in headlights
//		float3	colorNight			= NIGHT_DARKEN(color.rgb) * float3 ( 0.9, 1.1, 0.9 );
//				color.rgb			*= 1.75;	// lighten it up some to simulate silt
//				color.rgb			= lerp ( color.rgb, colorNight, night );


		// lighting
		float3	dots			= GetWaterLightdots( normal, specularNormal, eyevec, occlusion );
		lights	light			= GetWaterLight( dots, omni, shadow, eyevec, normal );
				color.rgb		*= light.sun;

//if ( slice < 2 )
//if ( slicestep )
//{

		// depth fog penetrating to refraction of ground & objects in water
//		float	fogAmount		= saturate( 1 - exp( -waterDepth * 5 * gWater.Settings2.z * i.diffuse.a ) );
		float	fogAmount		= saturate( 1 - exp( -waterDepth * gWater.Settings2.z * i.diffuse.a ) );
				color.rgb 		= lerp( refraction.rgb, color.rgb, fogAmount);
//}
		float	borderSoftening = saturate( waterDepth * 0.1 * gWater.Settings2.x );
				borderSoftening	-= waterDist * 0.005f;	
				borderSoftening	= saturate(borderSoftening);

		// environmental reflection on surface
		float	softshadow		= max( shadow, 0.35 ) * max( occlusion, 0.25 );
		float	fresnel			= Fresnel( eyevec, normal ) * softshadow;
				fresnel			*= borderSoftening;	// kill reflection as it nears water edge
				color.rgb		= lerp( color.rgb, reflection, fresnel );//(shadow * 0.5 + 0.5 )  * occlusion);

		// specular sparklies on wave tops
				color.rgb		+= light.spc * borderSoftening;	// kill specular as it nears water edge

		// Scattering
				color.rgb		*= i.extinction.xyz;
				color.rgb		+= NIGHT_DARKEN2 ( i.inscatter.xyz, night);

		// Fade out a la distance
		// Border softening && sea shore
//if ( slice < 2 )
//if ( slicestep )
//{

/*
		float	borderSoftening = saturate( waterDepth * 0.1 * gWater.Settings2.x );
				borderSoftening	-= waterDist * 0.005f;	
				borderSoftening	= saturate(borderSoftening);	
*/

				color.rgb = lerp( refraction.rgb, color.rgb, borderSoftening ); //Make water transparent at low water depth
//}




/*
	// everything's green ... so flag not set
	#if defined(bNoSlice1)
		color.r *= 10;
	#else
		color.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice2)
		color.r *= 10;
	#else
		color.g *= 10;
	#endif
*/
/*
	// everything's green ... so flag not set
	#if defined(bNoSlice3)
		color.r *= 10;	// slice 0, 1 turn red
	#else
		color.g *= 10;	// slice 2, 3 turn green
	#endif
*/

		return	color;
    }


//------------------------------------------------------

	// nothing seems to use this, but compiler blows up w/o it
	float4 ph_water_ocean( VS_GroundWaterOutput_Z i) : COLOR0
	{
		float4	color	= ph_water( i );
				color.r *= 10;
		return	color;
	}

	// all large bodies of water seem to use this
	float4 ph_water_lake( VS_GroundWaterOutput_Z i) : COLOR0
	{
		float4	color	= ph_water( i );
//				color.g *= 10;
		return	color;
	}


#endif