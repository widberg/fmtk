#ifndef	__SCAT_ROTSHAPE_VHL__
#define	__SCAT_ROTSHAPE_VHL__

#include "_vertex_const.h"
#include "hlsl_math.h"
#include "hlsl_shadow.h"
#include "_vertex_scatter.h"
#include "scat_rotshape.h"

//------------------------------------------------
#if ( DISTANCE_SMOKE == 1 )
//------------------------------------------------
	struct VS_Vertex3D {
		float4	position	: POSITION;		// Vertex pos
		float4	color		: COLOR0;		// Vertex color
		float2	uv			: TEXCOORD0;	// Vertex texture coordinate
	};

	//----------------------------------------------------

	void vh_base_lighting( VS_Vertex3D i, inout VS_ScatRotShapeOutput o, float4 wPivotPos)
	{
		float3	extinction;
		float3	skylight;
		scattering(wPivotPos, extinction, o.inscatter.xyz, o.sunlight.xyz, skylight.xyz);

				extinction.xyz	*= GOURAUD_DFLT.xyz;
				o.inscatter.xyz *= MTL_ADDSOUS_NULL;

		float3	emissive		= MTL_EMISSIVE.xyz * DLIGHT_INVINTENSITY * extinction.xyz;

	// keep this? otherwise dust is really bright
		float	sundot			= saturate( DLIGHT_DIR.y );
				o.sunlight.xyz	= o.sunlight.xyz * sundot
								+   skylight.xyz				// added, but might remove
								+   AMBIENT_OCCLUSION_COLOR
								+   emissive;	// moving it here to see if it helps distant smoke blend better

		float3	vcolor			= MTL_DIFFUSE.xyz * extinction.xyz;
//				vcolor			*= i.color.rgb;		// added color .. don't do this, b/c i.color.rgb is 0, so blackens everything
				o.sunlight.w	= GOURAUD_DFLT.w;// * MTL_OPACITY;	// added MTL_OPACITY .. doesn't help

//			o.skylight.w	= i.color.w   * MTL_OPACITY * GOURAUD_DFLT.w;

//				o.sunlight.w	*= i.color.w;		// added color .. don't do this, b/c i.color.w is 0, so removes it all
				o.sunlight.xyz	*= vcolor;
//				o.sunlight.xyz	+= emissive;
	}

	//----------------------------------------------------
	// distant smoke clouds, fog banks, random small plants
	//----------------------------------------------------
	void vh_front( VS_Vertex3D i,inout VS_ScatRotShapeOutput o)
	{
		float4 wPos			= WorldVertex(RSHAPE_PIVOT);
		float4 pivot		= WorldToViewVertex(wPos);
		float4	vPos;
				vPos.xyz	= pivot.xyz;
				vPos.w		= C_UNIT;

		if (GOURAUD_DFLT.w > C_INV256)
		{

		float3	viewAxis	= normalize( float3(c[C_VIEW_CONTEXT].y, c[C_VIEW_CONTEXT+1].y, c[C_VIEW_CONTEXT+2].y) );
		float3	Z			= normalize(pivot.xyz).xyz;
		float3	X			= cross(viewAxis,Z).xyz;
		float3	Y			= cross(Z,X).xyz;
		
		// Scale
				X			*= RSHAPE_SCALE;
				Y			*= RSHAPE_SCALE;
				Z			*= -RSHAPE_SCALE;

		float3	pos			= (C_UNIT - i.position.xyz) * RSHAPE_DWRIGHT
							+ i.position.xyz * RSHAPE_UPLEFT;

				X			*= pos.x;
				Y			*= pos.y;
				Z			*= pos.z;

				vPos.xyz	= X + Y + Z + pivot.xyz;
		}

				o.position	= ProjVertex(vPos);
				o.uv		= MaterialMat(i.uv);
		
		vh_base_lighting(i,o,wPos);
	}


	//----------------------------------------------------
	// foggy haze over Offshore Shack lake
	//----------------------------------------------------
	void vh_normal( VS_Vertex3D i, inout VS_ScatRotShapeOutput o)
	{
		float4	wPos		= WorldVertex(RSHAPE_PIVOT);
		float4	pivot		= WorldToViewVertex(wPos);
		float4	vPos;
				vPos.xyz	= pivot.xyz;
				vPos.w		= C_UNIT;

		if (GOURAUD_DFLT.w > C_INV256)
		{
		float3	viewAxis	= float3(c[C_VIEW_CONTEXT].y, c[C_VIEW_CONTEXT+1].y, c[C_VIEW_CONTEXT+2].y);
		float3	Y			= normalize( viewAxis );
		float3	X			= normalize( cross(Y,pivot.xyz) );
		float3	Z			= cross(X,Y);

		// Scale
				X			*= RSHAPE_SCALE;
				Y			*= RSHAPE_SCALE;
				Z			*= RSHAPE_SCALE;

		float3	pos			= (C_UNIT - i.position.xyz) * RSHAPE_DWRIGHT
							+ i.position.xyz * RSHAPE_UPLEFT;

				X			*= pos.x;
				Y			*= pos.y;
				Z			*= pos.z;
				vPos.xyz	= X + Y + Z + pivot.xyz;
		}

				o.position	= ProjVertex(vPos);
				o.uv		= MaterialMat(i.uv);

		vh_base_lighting(i,o,wPos);
	}

//------------------------------------------------
#else
//------------------------------------------------

	void vh_front ( out VS_ScatRotShapeOutput o )		{o.position = 0.0;}
	void vh_normal ( out VS_ScatRotShapeOutput o )	{o.position = 0.0;}

//------------------------------------------------
#endif
//------------------------------------------------


#endif