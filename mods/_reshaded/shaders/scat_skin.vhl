#ifndef	__SCAT_SKIN_VHL__
#define	__SCAT_SKIN_VHL__

#include "_vertex_const.h"
#include "skin.h"
#include "hlsl_math.h"
#include "skin.h"
#include "scat_mesh.h"
#include "_vertex_scatter.h"

//-----------------------------------------------------
/*
	skin.* does blending,
	then scat_skin.* does lighting prep
	then scat_mesh.phl finalizes pixel
*/
//-----------------------------------------------------

// 1 Bone blending
void vh_blend1(VS_Input_1Blend i, inout VS_ScatOutput o)
{
	VS_Output_Blended	b;
	Blend1(i,i.position,b);

	float4 wPos, vPos;
	o.position	= WorldAndViewAndProjectVertex( b.position, wPos, vPos );
	
	#ifdef	bShadowMap
		o.shadowtcproj = vPos.xyz;
	#endif

#ifdef	bNormal
	// Binormal * sign
	float3		vBinormal = cross(b.normal,b.tangent)*b.handedness;
	
	// Tangent Space
	float3x3	mLight;
				mLight[0]	= b.tangent;
				mLight[1]	= vBinormal;
				mLight[2]	= b.normal;
	OutTexSpace(o.TexSpace,mLight);
#else
	OutTexSpace(o.TexSpace,b.normal);
#endif


	o.eyevec.xyz	= EYE_LOCAL.xyz - b.position.xyz;

	#ifdef	bDirt
		SetDirtiness ( o );
	#endif
		 
	scatteringbase(wPos,o.extinction.xyz,o.inscatter.xyz);
	//o.extinction.xyz *= GOURAUD_DFLT.xyz;
	o.inscatter.xyz*=MTL_ADDSOUS_NULL;	//Matiere Additif ou Soustractif on vire !

	//Texture Coord
	float2	uv	= MaterialMat(i.uv);
	SetDiffuseUV(o,uv);
	o.omni = C_NULL;

	o.brokenUV			= SetBrokenUV(uv);

//o.extinction.r *= 10;
}
	

// 4 Bones blending
void vh_blend4(VS_Input_4Blend i, inout VS_ScatOutput o)
{
	VS_Output_Blended	b;
	Blend4(i,i.position,b);

	float4 wPos, vPos;
	o.position	= WorldAndViewAndProjectVertex( b.position, wPos, vPos );
	
	#ifdef	bShadowMap
		o.shadowtcproj = vPos.xyz;
	#endif

#ifdef	bNormal
	//Binormal * sign
	float3		vBinormal = cross(b.normal,b.tangent)*b.handedness;
	
	//Tangent Space
	float3x3	mLight;
				mLight[0]	= b.tangent;
				mLight[1]	= vBinormal;
				mLight[2]	= b.normal;
	OutTexSpace(o.TexSpace,mLight);
#else
	OutTexSpace(o.TexSpace,b.normal);
#endif
	
	o.eyevec.xyz	= EYE_LOCAL.xyz - b.position.xyz;

	#ifdef	bDirt
		SetDirtiness ( o );
	#endif

	scatteringbase(wPos,o.extinction.xyz,o.inscatter.xyz);
	//o.extinction.xyz *= GOURAUD_DFLT.xyz;
	o.inscatter.xyz*=MTL_ADDSOUS_NULL;	//Matiere Additif ou Soustractif on vire !

	//Texture Coord
	float2	uv	= MaterialMat(i.uv);
	SetDiffuseUV(o,uv);
	o.omni = C_NULL;

	o.brokenUV			= SetBrokenUV(uv);

//o.extinction.b *= 10;
}


//---------------------------------------
// headlight buffers
//---------------------------------------

void vh_blend1_gbuffer(VS_Input_1Blend i, out VS_GBufferOutput o)
{
	VS_Output_Blended	b;
	Blend1(i,i.position,b);
	
	float4 wPos, vPos;
	o.position	= WorldAndViewAndProjectVertex( b.position, wPos, vPos );
	o.position2 = o.position;

#ifdef	bNormal
	// Binormal * sign
	float3		vBinormal = cross(b.normal,b.tangent)*b.handedness;
	
	// Tangent Space
	float3x3	mLight;
				mLight[0]	= b.tangent;
				mLight[1]	= vBinormal;
				mLight[2]	= b.normal;
	mLight = transpose(transpose(mLight));	// inverse mLight
//	mLight = transpose(mLight);	// inverse mLight
	OutTexSpace(o.TexSpace,mLight);
#else
	OutTexSpace(o.TexSpace,b.normal);
#endif


	o.tDiffuse.xy = (MaterialMat(i.uv.xy));
}


void vh_blend4_gbuffer(VS_Input_4Blend i, out VS_GBufferOutput o)
{
	VS_Output_Blended	b;
	Blend4(i,i.position,b);
	
	float4 wPos, vPos;
	o.position	= WorldAndViewAndProjectVertex( b.position, wPos, vPos );
	o.position2 = o.position;

#ifdef	bNormal
	// Binormal * sign
	float3		vBinormal = cross(b.normal,b.tangent)*b.handedness;
	
	// Tangent Space
	float3x3	mLight;
				mLight[0]	= b.tangent;
				mLight[1]	= vBinormal;
				mLight[2]	= b.normal;
	mLight = transpose(transpose(mLight));	// inverse mLight
//	mLight = transpose(mLight);	// inverse mLight
	OutTexSpace(o.TexSpace,mLight);
#else
	OutTexSpace(o.TexSpace,b.normal);
#endif

	o.tDiffuse.xy = (MaterialMat(i.uv.xy));
}


#endif